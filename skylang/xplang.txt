- 副作用是必要的。
- 用数组来狗杂链表很简单，但是用链表来构造数组却不可能，
  所以必须有高效易用优雅的数组类型来支持。
- 映射（Dict/Map）也是不可缺少的
- 同时考虑是否支持类似Haskell的模式匹配
- 向量第一个元素的索引为 0 , 最后一个元素的索引为 length - 1 简写为 @/end
- 自动内存管理，垃圾回收
- 当进行算术运算的时候，true 为 1，false 为 0

function arg1 arg2
    | pred1 is true = result1
    | pred2 is true = result2
    | otherwise = result3


布尔值：
type: Bool
state:
    false
    true
operators:
    or  ;; or false 123 = 123, or false (1 == 0) = false, or false false 1 = 1
    and ;; and true 123 = 123, and false 123 = false
    not ;; not true = false, not false = true


链表：/不可变
type: List
empty: []
operators:
    cons x xs ≡ x:xs  ;; 返回一个新表 ys，head ys = x, tail ys = xs
    null? ;; 判空
    head  ;; 取第一个元素
    tail  ;; 返回去掉第一个元素之后的List
    append xs ys ≡ xs ++ ys
    flip f = \ y x -> f x y
    reverse xs ≡ xs[flip cons, [],] ;; 反转 List xs
        ≡ foldl (flip cons) [] xs  ;; 由 foldl 实现
    join x xs = if null xs then []
                else (concat (head xs:(map (\y -> x++y) (tail xs))))
    slice start step stop xs ≡ xs[start:step:stop]
    take n xs ≡ xs[:1:n] ≡ xs[::n]  ;; 边界为 0/@ 省略，增量为 1 省略
    drop n xs ≡ xs[n:1:] ≡ xs[n::]  ;; 边界为 0/@ 省略，增量为 1 省略
    takeWhile p xs ≡ xs[<p]  ;; 返回开头 p(x) 为真的元素
    dropWhile p xs ≡ xs[>p]  ;; 丢掉开头 p(x) 为真的元素
    memq x xs ≡ xs[>\y -> y != x]   ;; 返回以 x 为头元素的 List 或 []
    memp p xs ≡ xs[>\x -> not p(x)] ;; 返回p(x)为真，x 为头元素的 List 或 []
    map p xs ≡ xs[,,p]  ;; map 由 foldr 实现
        ≡ foldr (\x acc -> (p x):acc) [] xs
    foldr p b xs ≡ xs[,p,b]  ;; 递归实现
    foldl p b xs ≡ xs[p,b,]  ;; 尾递归实现
    length xs ≡ xs[\x->true,] ;; 由 count 实现
    count p xs ≡ xs[p,] ;; 由 foldl 实现
         ≡ xs[q, 0,]
            q = \acc x -> if p x then acc + 1 else acc
    filter p . slice start step stop xs ≡ xs[start:step:stop,p]
    filter p . take n ≡ xs[::n,p]
    filter p . drop n ≡ xs[n::,p]
    filter p xs ≡ xs[,p]  ;; 由 foldr 实现
        ≡ xs[,q,[]]  ;; 返回 p(x)为真的元素
            q = \x acc -> if p(x) then (x:acc) else acc
        ≡ [x| x <- xs, p(x)]
    split x xs ≡ xs[,x,]  ;; 由 foldr 实现
        ≡ xs[,q,[]] ;; 返回一个 List 的 List
            q = \y acc -> if y == x
                            then ([]:acc)
                            else if (null? acc)
                            then [[y]]
                            else ((y:(head acc)):tail acc)
    remove x xs ≡ xs[,\y -> y != x]  ;; remove 很容易由 filter 实现

二元组：/不可变
type:

三元组/二叉树：/不可变
type: Tuple
empty: ()
operators:
    prev
    root
    next
    () <+ x = ((), x, ())
    x +> () = ((), x, ())
    xs <+ x ;; 在右边插入, ((), v, ()) <+ x = ((), v, () <+ x)
    x +> xs ;; 在左边插入, x +> ((), v, ()) = (x +> (), v, ())
        x +> (((), u, ()), v, ()) = ((((), u, ()), x, ()), v, ())


向量：/可变
type: IndexList/IList
empty: []
operators:
    null?
    length
    insert x n xs  ;; 在 xs 的第 n 个位置插入 x, O(n)
    insert x 0 xs ≡ x =| xs  ;; 左吸收 O(n)
    insert x @ xs ≡ xs |= x  ;; 右吸收 O(1)

映射：/可变
type: Dict/Map
empty: {}
fields:
    length
    keys
    values
    items
{
    name: value,
}


高阶函数


树等复杂的数据结构用_*向量*_进行实现
