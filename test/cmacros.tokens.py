Token(type='lc', text=';;; Copyright 1984-2017 Cisco Systems, Inc.')
Token(type='lc', text=';;; ')
Token(type='lc', text=';;; Licensed under the Apache License, Version 2.0 (the "License");')
Token(type='lc', text=';;; you may not use this file except in compliance with the License.')
Token(type='lc', text=';;; You may obtain a copy of the License at')
Token(type='lc', text=';;; ')
Token(type='lc', text=';;; http://www.apache.org/licenses/LICENSE-2.0')
Token(type='lc', text=';;; ')
Token(type='lc', text=';;; Unless required by applicable law or agreed to in writing, software')
Token(type='lc', text=';;; distributed under the License is distributed on an "AS IS" BASIS,')
Token(type='lc', text=';;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.')
Token(type='lc', text=';;; See the License for the specific language governing permissions and')
Token(type='lc', text=';;; limitations under the License.')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='disable-unbound-warning')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='compile')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$sputprop')
Token(type='at', text="'name")
Token(type='at', text="'no-unbound-warning")
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='disable-unbound-warning')
Token(type='at', text='lookup-constant')
Token(type='at', text='flag->mask')
Token(type='at', text='construct-name')
Token(type='at', text='tc-field-list')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-constant')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='ctype')
Token(type='at', text='x')
Token(type='at', text='y')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'ctype")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'x")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='compile')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='putprop')
Token(type='at', text="'x")
Token(type='at', text="'*constant-ctype*")
Token(type='at', text="'ctype")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='putprop')
Token(type='at', text="'x")
Token(type='at', text="'*constant*")
Token(type='at', text='y')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='at', text='y')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'x")
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='compile')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='putprop')
Token(type='at', text="'x")
Token(type='at', text="'*constant*")
Token(type='at', text='y')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='compile')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='lookup-constant')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='flag')
Token(type='ob', text='(')
Token(type='at', text='box')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='symbol?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'lookup-constant")
Token(type='st', text='"~s is not a symbol"')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='v')
Token(type='ob', text='(')
Token(type='at', text='getprop')
Token(type='at', text='x')
Token(type='at', text="'*constant*")
Token(type='at', text='flag')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='when')
Token(type='ob', text='(')
Token(type='at', text='eq?')
Token(type='at', text='v')
Token(type='at', text='flag')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'lookup-constant")
Token(type='st', text='"undefined constant ~s"')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='v')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='constant')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'x")
Token(type='cb', text=')')
Token(type='ob', text="#`'#,(")
Token(type='at', text='datum->syntax')
Token(type='at', text="#'x")
Token(type='ob', text='(')
Token(type='at', text='lookup-constant')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='constant-case')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='const')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='at', text='ee1')
Token(type='at', text='ee2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='meta-cond')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='member')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='const')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='k')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='at', text='ee1')
Token(type='at', text='ee2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='const')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='meta-cond')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='member')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='const')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='k')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='ob', text='(')
Token(type='at', text='syntax-error')
Token(type='at', text="#'const")
Token(type='ob', text='(')
Token(type='at', text='format')
Token(type='st', text='"unhandled value ~s"')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='const')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='compile')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='construct-name')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='template-identifier')
Token(type='at', text='.')
Token(type='at', text='args')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text='template-identifier')
Token(type='ob', text='(')
Token(type='at', text='string->symbol')
Token(type='ob', text='(')
Token(type='at', text='apply')
Token(type='at', text='string-append')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='format')
Token(type='st', text='"~a"')
Token(type='ob', text='(')
Token(type='at', text='syntax->datum')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='args')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='macro-define-structure')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='constant?')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='syntax->datum')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='boolean?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='number?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='quote')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='quote')
Token(type='at', text='obj')
Token(type='cb', text=')')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='identifier?')
Token(type='ob', text="#'(")
Token(type='at', text='name')
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='macro-define-structure')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='id2')
Token(type='at', text='init')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='identifier?')
Token(type='ob', text="#'(")
Token(type='at', text='name')
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='at', text='id2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='constant?')
Token(type='ob', text="#'(")
Token(type='at', text='init')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='constructor')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'name")
Token(type='st', text='"make-"')
Token(type='at', text="#'name")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='predicate')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'name")
Token(type='at', text="#'name")
Token(type='st', text='"?"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='index-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text='x')
Token(type='at', text="#'name")
Token(type='st', text='"-"')
Token(type='at', text='x')
Token(type='st', text='"-index"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='at', text='id2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='access')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text='x')
Token(type='at', text="#'name")
Token(type='st', text='"-"')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='at', text='id2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='assign')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text='x')
Token(type='st', text='"set-"')
Token(type='at', text="#'name")
Token(type='st', text='"-"')
Token(type='at', text='x')
Token(type='st', text='"!"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='at', text='id2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='structure-length')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='ob', text='(')
Token(type='at', text='length')
Token(type='ob', text="#'(")
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='at', text='id2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='index')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='i')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ids')
Token(type='ob', text="#'(")
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='at', text='id2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='ids')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='at', text='i')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='at', text='i')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='ids')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='constructor')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='#%vector')
Token(type='at', text="'name")
Token(type='at', text='id1')
Token(type='at', text='...')
Token(type='at', text='init')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='predicate')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='t')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='#%vector?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='#3%fx=')
Token(type='ob', text='(')
Token(type='at', text='#3%vector-length')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='at', text='structure-length')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='#%eq?')
Token(type='ob', text='(')
Token(type='at', text='#3%vector-ref')
Token(type='at', text='x')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='at', text="'name")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='index-name')
Token(type='at', text='index')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='access')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='#%vector-ref')
Token(type='at', text='x')
Token(type='at', text='index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='assign')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='at', text='update')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='#%vector-set!')
Token(type='at', text='x')
Token(type='at', text='index')
Token(type='at', text='update')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='type-case')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='expr')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='pred1')
Token(type='at', text='pred2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='at', text='ee1')
Token(type='at', text='ee2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='t')
Token(type='at', text='expr')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cond')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='pred1')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='pred2')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='at', text='ee1')
Token(type='at', text='ee2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; machine-case and float-type-case call eval to pick up the')
Token(type='lc', text=';;; system value of $target-machine under the assumption that')
Token(type='lc', text=";;; we'll be in system mode when we expand the macro")
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='machine-case')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='target-machine')
Token(type='ob', text='(')
Token(type='at', text='eval')
Token(type='ob', text="'(")
Token(type='at', text='$target-machine')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='loop')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='m')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='m')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='a1')
Token(type='at', text='a2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='m1')
Token(type='at', text='m2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='machines')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='a1')
Token(type='at', text='a2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='memq')
Token(type='at', text='target-machine')
Token(type='at', text='machines')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='ob', text="#'(")
Token(type='at', text='e')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='printf')
Token(type='st', text='"Warning: empty machine-case clause for ~s~%"')
Token(type='at', text='machines')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='$oops')
Token(type='at', text="'assembler")
Token(type='st', text='"empty machine-case clause for ~s"')
Token(type='ob', text="'(")
Token(type='at', text='a1')
Token(type='at', text='a2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='at', text='e')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='loop')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='float-type-case')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='ieee')
Token(type='at', text='else')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='ieee')
Token(type='at', text='tag')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='m')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='#t')
Token(type='lc', text='; all currently supported machines are ieee')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='tag1')
Token(type='at', text='tag2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='m')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='float-type-case')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='tag2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='m')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='m')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='float-type-case')
Token(type='at', text='m')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='ieee')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-error')
Token(type='at', text='x')
Token(type='st', text='"misplaced aux keyword"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';; layout of our flags field:')
Token(type='lc', text=';; bit 0: needs head space?')
Token(type='lc', text=';; bit 1 - 9: upper 9 bits of index (lower bit is the needs head space index')
Token(type='lc', text=';; bit 10 - 12: interface')
Token(type='lc', text=';; bit 13: closure?')
Token(type='lc', text=';; bit 14: error?')
Token(type='lc', text=';; bit 15: has-headroom-version?')
Token(type='ob', text='(')
Token(type='at', text='macro-define-structure')
Token(type='ob', text='(')
Token(type='at', text='libspec')
Token(type='at', text='name')
Token(type='at', text='flags')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-does-not-expect-headroom-index')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-index-offset')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-index-size')
Token(type='at', text='10')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-index-base-offset')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-index-base-size')
Token(type='at', text='9')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-interface-offset')
Token(type='at', text='10')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-interface-size')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-closure-index')
Token(type='at', text='13')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-error-index')
Token(type='at', text='14')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-has-does-not-expect-headroom-version-index')
Token(type='at', text='15')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='libspec-fake-index')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='make-libspec-flags')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='index-base')
Token(type='at', text='does-not-expect-headroom?')
Token(type='at', text='closure?')
Token(type='at', text='interface')
Token(type='at', text='error?')
Token(type='at', text='has-does-not-expect-headroom-version?')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='fx>=')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-index-base-size')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='at', text='index-base')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'make-libspec-flags")
Token(type='st', text='"libspec base index exceeds ~s-bit bound: ~s"')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-index-base-size')
Token(type='cb', text=')')
Token(type='at', text='index-base')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='fx>=')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-interface-size')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='at', text='interface')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'make-libspec-flags")
Token(type='st', text='"libspec interface exceeds ~s-bit bound: ~s"')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-interface-size')
Token(type='cb', text=')')
Token(type='at', text='interface')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='when')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='at', text='does-not-expect-headroom?')
Token(type='ob', text='(')
Token(type='at', text='not')
Token(type='at', text='has-does-not-expect-headroom-version?')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'make-libspec-flags")
Token(type='st', text='"creating invalid version of libspec that does not expect headroom"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='at', text='does-not-expect-headroom?')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-does-not-expect-headroom-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='index-base')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-index-base-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='interface')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-interface-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='at', text='closure?')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-closure-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='at', text='error?')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-error-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='at', text='has-does-not-expect-headroom-version?')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-has-does-not-expect-headroom-version-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='libspec-does-not-expect-headroom?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxbit-set?')
Token(type='ob', text='(')
Token(type='at', text='libspec-flags')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-does-not-expect-headroom-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='libspec-index')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxbit-field')
Token(type='ob', text='(')
Token(type='at', text='libspec-flags')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-index-offset')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-index-size')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-index-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='libspec-interface')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxbit-field')
Token(type='ob', text='(')
Token(type='at', text='libspec-flags')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-interface-offset')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-interface-size')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-interface-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='libspec-closure?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxbit-set?')
Token(type='ob', text='(')
Token(type='at', text='libspec-flags')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-closure-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='libspec-error?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxbit-set?')
Token(type='ob', text='(')
Token(type='at', text='libspec-flags')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-error-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='libspec-has-does-not-expect-headroom-version?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxbit-set?')
Token(type='ob', text='(')
Token(type='at', text='libspec-flags')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-has-does-not-expect-headroom-version-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='libspec->does-not-expect-headroom-libspec')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='libspec')
Token(type='at', text='?libspec')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='libspec-has-does-not-expect-headroom-version?')
Token(type='at', text='libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text='#f')
Token(type='st', text='"generating invalid libspec for ~s that does not expect headroom"')
Token(type='ob', text='(')
Token(type='at', text='libspec-name')
Token(type='at', text='libspec')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='make-libspec')
Token(type='ob', text='(')
Token(type='at', text='libspec-name')
Token(type='at', text='libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='libspec-flags')
Token(type='at', text='libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-does-not-expect-headroom-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='libspec->headroom-libspec')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='libspec')
Token(type='at', text='?libspec')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='make-libspec')
Token(type='ob', text='(')
Token(type='at', text='libspec-name')
Token(type='at', text='libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogand')
Token(type='ob', text='(')
Token(type='at', text='libspec-flags')
Token(type='at', text='libspec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlognot')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='libspec-does-not-expect-headroom-index')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='return-values')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='args')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='values')
Token(type='at', text='args')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='with-values')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='producer')
Token(type='at', text='proc')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='call-with-values')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='at', text='producer')
Token(type='cb', text=')')
Token(type='at', text='proc')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='meta-assert')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='#`(')
Token(type='at', text='let-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='t')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='at', text='e')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='void')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='#,(')
Token(type='at', text='#%$make-source-oops')
Token(type='at', text='#f')
Token(type='st', text='"failed meta-assertion"')
Token(type='at', text="#'e")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='void')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='features')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='foo')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='feature-list')
Token(type='at', text='when-feature')
Token(type='at', text='unless-feature')
Token(type='at', text='if-feature')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='feature-list')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='foo')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='when-feature')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='at', text='foo')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='foo')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='begin')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='bar')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='void')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='unless-feature')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='at', text='foo')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='foo')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='void')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='bar')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='begin')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='if-feature')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='at', text='foo')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='foo')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='bar')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='cb', text=')')
Token(type='at', text='e2')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='scheme-version')
Token(type='at', text='#x00090503')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-machine-types')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='value')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='enumerate')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='cname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text='name')
Token(type='st', text='"machine-type-"')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='cname')
Token(type='at', text='value')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='machine-type-alist')
Token(type='ob', text="'(")
Token(type='ob', text='(')
Token(type='at', text='value')
Token(type='at', text='.')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='machine-type-limit')
Token(type='ob', text='(')
Token(type='at', text='+')
Token(type='ob', text='(')
Token(type='at', text='max')
Token(type='at', text='value')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-machine-types')
Token(type='at', text='any')
Token(type='at', text='i3le')
Token(type='at', text='ti3le')
Token(type='at', text='i3nt')
Token(type='at', text='ti3nt')
Token(type='at', text='i3fb')
Token(type='at', text='ti3fb')
Token(type='at', text='i3ob')
Token(type='at', text='ti3ob')
Token(type='at', text='i3osx')
Token(type='at', text='ti3osx')
Token(type='at', text='a6le')
Token(type='at', text='ta6le')
Token(type='at', text='a6osx')
Token(type='at', text='ta6osx')
Token(type='at', text='a6ob')
Token(type='at', text='ta6ob')
Token(type='at', text='a6s2')
Token(type='at', text='ta6s2')
Token(type='at', text='i3s2')
Token(type='at', text='ti3s2')
Token(type='at', text='a6fb')
Token(type='at', text='ta6fb')
Token(type='at', text='i3nb')
Token(type='at', text='ti3nb')
Token(type='at', text='a6nb')
Token(type='at', text='ta6nb')
Token(type='at', text='a6nt')
Token(type='at', text='ta6nt')
Token(type='at', text='i3qnx')
Token(type='at', text='ti3qnx')
Token(type='at', text='arm32le')
Token(type='at', text='tarm32le')
Token(type='at', text='ppc32le')
Token(type='at', text='tppc32le')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='include')
Token(type='st', text='"machine.def"')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='machine-type-name')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='ob', text='(')
Token(type='at', text='assv')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='machine-type')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='machine-type-alist')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='log2')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-length')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='at', text='n')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; a string-char is a 32-bit equivalent of a ptr char: identical to a')
Token(type='lc', text='; ptr char on 32-bit machines and the low-order half of a ptr char on')
Token(type='lc', text='; 64-bit machines.')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='string-char-bits')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='string-char-bytes')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='string-char-offset')
Token(type='ob', text='(')
Token(type='at', text='log2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='string-char-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr-bytes')
Token(type='ob', text='(')
Token(type='at', text='/')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; size in bytes')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='log2-ptr-bytes')
Token(type='ob', text='(')
Token(type='at', text='log2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; ordinary types must be no more than 8 bits long')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ordinary-type-bits')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='lc', text='; smallest addressable unit')
Token(type='nl', text='\n')
Token(type='lc', text='; (typemod = type modulus)')
Token(type='lc', text='; The typemod defines the range of primary types and is also the')
Token(type='lc', text='; offset that we subtract off of the actual addresses before adding')
Token(type='lc', text='; in the primary type tag to obtain a ptr.')
Token(type='lc', text=';')
Token(type='lc', text='; The typemod imposes a lower bound on our choice of alignment')
Token(type='lc', text='; since the low n bits of aligned addresses must be zero so that')
Token(type='lc', text='; we can steal those bits for type tags.')
Token(type='lc', text=';')
Token(type='lc', text='; Leaving the typemod at 8 for 64-bit ports, means that we "waste"')
Token(type='lc', text='; a bit of primary type space.  If we ever attempt to reclaim this')
Token(type='lc', text='; bit, we must remember that flonums are actually represented by two')
Token(type='lc', text='; primary type codes, ie. 1xxx and 0xxx, see also the comment under')
Token(type='lc', text='; byte-alignment.')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='typemod')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='primary-type-bits')
Token(type='ob', text='(')
Token(type='at', text='log2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='typemod')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; We must have room for forward marker and forward pointer, hence two ptrs.')
Token(type='lc', text='; We sometimes violate this for flonums since we "extract" the real')
Token(type='lc', text='; and imag part by returning pointers into the inexactnum structure.')
Token(type='lc', text='; This is safe since we never forward flonums.')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='byte-alignment')
Token(type='ob', text='(')
Token(type='at', text='max')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='typemod')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='*')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; fasl codes---see fasl.c for documentation of representation')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-header')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-box')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-symbol')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-ratnum')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-vector')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-inexactnum')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-closure')
Token(type='at', text='6')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-pair')
Token(type='at', text='7')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-flonum')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-string')
Token(type='at', text='9')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-large-integer')
Token(type='at', text='10')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-code')
Token(type='at', text='11')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-immediate')
Token(type='at', text='12')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-entry')
Token(type='at', text='13')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-library')
Token(type='at', text='14')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-library-code')
Token(type='at', text='15')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-graph')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-graph-def')
Token(type='at', text='17')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-graph-ref')
Token(type='at', text='18')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-gensym')
Token(type='at', text='19')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-exactnum')
Token(type='at', text='20')
Token(type='cb', text=')')
Token(type='lc', text='; 21')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-fasl-size')
Token(type='at', text='22')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-record')
Token(type='at', text='23')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-rtd')
Token(type='at', text='24')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-small-integer')
Token(type='at', text='25')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-base-rtd')
Token(type='at', text='26')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-fxvector')
Token(type='at', text='27')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-ephemeron')
Token(type='at', text='28')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-bytevector')
Token(type='at', text='29')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-weak-pair')
Token(type='at', text='30')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-eq-hashtable')
Token(type='at', text='31')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-symbol-hashtable')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-group')
Token(type='at', text='33')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-visit')
Token(type='at', text='34')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-revisit')
Token(type='at', text='35')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-immutable-vector')
Token(type='at', text='36')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-immutable-string')
Token(type='at', text='37')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-immutable-fxvector')
Token(type='at', text='38')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-immutable-bytevector')
Token(type='at', text='39')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-type-immutable-box')
Token(type='at', text='40')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-ptr')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-u8')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-i16')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-i24')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-i32')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-i40')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-i48')
Token(type='at', text='6')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-i56')
Token(type='at', text='7')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-i64')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-single')
Token(type='at', text='9')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-fld-double')
Token(type='at', text='10')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fasl-header')
Token(type='ob', text='(')
Token(type='at', text='bytevector')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fasl-type-header')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='at', text='0')
Token(type='at', text='0')
Token(type='ob', text='(')
Token(type='at', text='char->integer')
Token(type='ch', text='#\\c')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char->integer')
Token(type='ch', text='#\\h')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char->integer')
Token(type='ch', text='#\\e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char->integer')
Token(type='ch', text='#\\z')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-enumerated-constants')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='reloc-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='i')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='enumerate')
Token(type='ob', text="#'(")
Token(type='at', text='reloc-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-name')
Token(type='at', text='i')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-reloc-constants')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='all')
Token(type='at', text='x')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='arch')
Token(type='at', text='y')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='#`(')
Token(type='at', text='constant-case')
Token(type='at', text='architecture')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='arch')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-enumerated-constants')
Token(type='at', text='x')
Token(type='at', text='...')
Token(type='at', text='y')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-reloc-constants')
Token(type='ob', text='(')
Token(type='at', text='all')
Token(type='at', text='reloc-abs')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='x86')
Token(type='at', text='reloc-rel')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='sparc')
Token(type='at', text='reloc-sparcabs')
Token(type='at', text='reloc-sparcrel')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='sparc64')
Token(type='at', text='reloc-sparc64abs')
Token(type='at', text='reloc-sparc64rel')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ppc')
Token(type='at', text='reloc-ppccall')
Token(type='at', text='reloc-ppcload')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='x86_64')
Token(type='at', text='reloc-x86_64-call')
Token(type='at', text='reloc-x86_64-jump')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='arm32')
Token(type='at', text='reloc-arm32-abs')
Token(type='at', text='reloc-arm32-call')
Token(type='at', text='reloc-arm32-jump')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ppc32')
Token(type='at', text='reloc-ppc32-abs')
Token(type='at', text='reloc-ppc32-call')
Token(type='at', text='reloc-ppc32-jump')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='constant-case')
Token(type='at', text='ptr-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-extended-format')
Token(type='at', text='#x1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-type-offset')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-type-mask')
Token(type='at', text='#x7')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-code-offset-offset')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-code-offset-mask')
Token(type='at', text='#x3ffffff')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-item-offset-offset')
Token(type='at', text='30')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-item-offset-mask')
Token(type='at', text='#x3ffffff')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-extended-format')
Token(type='at', text='#x1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-type-offset')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-type-mask')
Token(type='at', text='#x7')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-code-offset-offset')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-code-offset-mask')
Token(type='at', text='#x3ff')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-item-offset-offset')
Token(type='at', text='14')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='reloc-item-offset-mask')
Token(type='at', text='#x3ffff')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='macro-define-structure')
Token(type='ob', text='(')
Token(type='at', text='reloc')
Token(type='at', text='type')
Token(type='at', text='item-offset')
Token(type='at', text='code-offset')
Token(type='at', text='long?')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SERROR')
Token(type='at', text='#x0000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='STRVNCATE')
Token(type='at', text='#x0001')
Token(type='cb', text=')')
Token(type='lc', text='; V for U to avoid msvc errno.h conflict')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SREPLACE')
Token(type='at', text='#x0002')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SAPPEND')
Token(type='at', text='#x0003')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SDEFAULT')
Token(type='at', text='#x0004')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='OPEN-ERROR-OTHER')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='OPEN-ERROR-PROTECTION')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='OPEN-ERROR-EXISTS')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='OPEN-ERROR-EXISTSNOT')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SEOF')
Token(type='at', text='-1')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='COMPRESS-GZIP')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='COMPRESS-LZ4')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='COMPRESS-FORMAT-BITS')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='COMPRESS-LOW')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='COMPRESS-MEDIUM')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='COMPRESS-HIGH')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='COMPRESS-MAX')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SICONV-DUNNO')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SICONV-INVALID')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SICONV-INCOMPLETE')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='SICONV-NOROOM')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; port flag masks are always single bits')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-input')
Token(type='at', text='#x01')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-output')
Token(type='at', text='#x02')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-binary')
Token(type='at', text='#x04')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-closed')
Token(type='at', text='#x08')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-file')
Token(type='at', text='#x10')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-compressed')
Token(type='at', text='#x20')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-exclusive')
Token(type='at', text='#x40')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-bol')
Token(type='at', text='#x80')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-eof')
Token(type='at', text='#x100')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-block-buffered')
Token(type='at', text='#x200')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-line-buffered')
Token(type='at', text='#x400')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-input-mode')
Token(type='at', text='#x800')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-char-positions')
Token(type='at', text='#x1000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-r6rs')
Token(type='at', text='#x2000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-fold-case')
Token(type='at', text='#x4000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flag-no-fold-case')
Token(type='at', text='#x8000')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='port-flags-offset')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ordinary-type-bits')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; allcaps versions are pre-shifted by port-flags-offset')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-INPUT')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-input')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-OUTPUT')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-output')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-BINARY')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-binary')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-CLOSED')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-closed')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-FILE')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-file')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-COMPRESSED')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-compressed')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-EXCLUSIVE')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-exclusive')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-BOL')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-bol')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-EOF')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-eof')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-BLOCK-BUFFERED')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-block-buffered')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-LINE-BUFFERED')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-line-buffered')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-INPUT-MODE')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-input-mode')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-CHAR-POSITIONS')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-char-positions')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-R6RS')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-r6rs')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-FOLD-CASE')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-fold-case')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='PORT-FLAG-NO-FOLD-CASE')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-no-fold-case')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; c-error codes')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_OTHER')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_CALL_UNBOUND')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_CALL_NONPROCEDURE_SYMBOL')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_CALL_NONPROCEDURE')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_CALL_ARGUMENT_COUNT')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_RESET')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_NONCONTINUABLE_INTERRUPT')
Token(type='at', text='6')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_VALUES')
Token(type='at', text='7')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ERROR_MVLET')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; object-file tags')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='visit-tag')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='revisit-tag')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; allocation spaces')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='space-locked')
Token(type='at', text='#x20')
Token(type='cb', text=')')
Token(type='lc', text='; lock flag')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='space-old')
Token(type='at', text='#x40')
Token(type='cb', text=')')
Token(type='lc', text='; oldspace flag')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-alloc-spaces')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='real')
Token(type='at', text='swept')
Token(type='at', text='unswept')
Token(type='at', text='unreal')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='real')
Token(type='ob', text='(')
Token(type='at', text='swept')
Token(type='ob', text='(')
Token(type='at', text='swept-name')
Token(type='at', text='swept-cname')
Token(type='at', text='swept-cchar')
Token(type='at', text='swept-value')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='last-swept-name')
Token(type='at', text='last-swept-cname')
Token(type='at', text='last-swept-cchar')
Token(type='at', text='last-swept-value')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unswept')
Token(type='ob', text='(')
Token(type='at', text='unswept-name')
Token(type='at', text='unswept-cname')
Token(type='at', text='unswept-cchar')
Token(type='at', text='unswept-value')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='last-unswept-name')
Token(type='at', text='last-unswept-cname')
Token(type='at', text='last-unswept-cchar')
Token(type='at', text='last-unswept-value')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unreal')
Token(type='ob', text='(')
Token(type='at', text='unreal-name')
Token(type='at', text='unreal-cname')
Token(type='at', text='unreal-cchar')
Token(type='at', text='unreal-value')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='last-unreal-name')
Token(type='at', text='last-unreal-cname')
Token(type='at', text='last-unreal-cchar')
Token(type='at', text='last-unreal-value')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='real-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='swept-name')
Token(type='at', text='...')
Token(type='at', text='last-swept-name')
Token(type='at', text='unswept-name')
Token(type='at', text='...')
Token(type='at', text='last-unswept-name')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='real-cname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='swept-cname')
Token(type='at', text='...')
Token(type='at', text='last-swept-cname')
Token(type='at', text='unswept-cname')
Token(type='at', text='...')
Token(type='at', text='last-unswept-cname')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='real-cchar')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='swept-cchar')
Token(type='at', text='...')
Token(type='at', text='last-swept-cchar')
Token(type='at', text='unswept-cchar')
Token(type='at', text='...')
Token(type='at', text='last-unswept-cchar')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='real-value')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='swept-value')
Token(type='at', text='...')
Token(type='at', text='last-swept-value')
Token(type='at', text='unswept-value')
Token(type='at', text='...')
Token(type='at', text='last-unswept-value')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='real-name')
Token(type='at', text='...')
Token(type='at', text='unreal-name')
Token(type='at', text='...')
Token(type='at', text='last-unreal-name')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='cname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='real-cname')
Token(type='at', text='...')
Token(type='at', text='unreal-cname')
Token(type='at', text='...')
Token(type='at', text='last-unreal-cname')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='cchar')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='real-cchar')
Token(type='at', text='...')
Token(type='at', text='unreal-cchar')
Token(type='at', text='...')
Token(type='at', text='last-unreal-cchar')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='value')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='real-value')
Token(type='at', text='...')
Token(type='at', text='unreal-value')
Token(type='at', text='...')
Token(type='at', text='last-unreal-value')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='space-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text='n')
Token(type='st', text='"space-"')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='<')
Token(type='ob', text='(')
Token(type='at', text='syntax->datum')
Token(type='at', text="#'last-unreal-value")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='space-locked')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'define-alloc-spaces")
Token(type='st', text='"conflict with space-locked"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='<')
Token(type='ob', text='(')
Token(type='at', text='syntax->datum')
Token(type='at', text="#'last-unreal-value")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='space-old')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'define-alloc-spaces")
Token(type='st', text='"conflict with space-old"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='space-name')
Token(type='at', text='value')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='real-space-alist')
Token(type='ob', text="'(")
Token(type='ob', text='(')
Token(type='at', text='real-name')
Token(type='at', text='.')
Token(type='at', text='real-value')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='space-cname-list')
Token(type='ob', text="'(")
Token(type='at', text='cname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='space-char-list')
Token(type='ob', text="'(")
Token(type='at', text='cchar')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='max-sweep-space')
Token(type='at', text='last-swept-value')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='max-real-space')
Token(type='at', text='last-unswept-value')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='max-space')
Token(type='at', text='last-unreal-value')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-alloc-spaces')
Token(type='ob', text='(')
Token(type='at', text='real')
Token(type='ob', text='(')
Token(type='at', text='swept')
Token(type='ob', text='(')
Token(type='at', text='new')
Token(type='st', text='"new"')
Token(type='ch', text='#\\n')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='lc', text='; all generation 0 objects allocated here')
Token(type='ob', text='(')
Token(type='at', text='impure')
Token(type='st', text='"impure"')
Token(type='ch', text='#\\i')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='lc', text='; most mutable objects allocated here (all ptrs)')
Token(type='ob', text='(')
Token(type='at', text='symbol')
Token(type='st', text='"symbol"')
Token(type='ch', text='#\\x')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='lc', text=';')
Token(type='ob', text='(')
Token(type='at', text='port')
Token(type='st', text='"port"')
Token(type='ch', text='#\\q')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='lc', text=';')
Token(type='ob', text='(')
Token(type='at', text='weakpair')
Token(type='st', text='"weakpr"')
Token(type='ch', text='#\\w')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='lc', text=';')
Token(type='ob', text='(')
Token(type='at', text='ephemeron')
Token(type='st', text='"emph"')
Token(type='ch', text='#\\e')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='lc', text=';')
Token(type='ob', text='(')
Token(type='at', text='pure')
Token(type='st', text='"pure"')
Token(type='ch', text='#\\p')
Token(type='at', text='6')
Token(type='cb', text=')')
Token(type='lc', text='; swept immutable objects allocated here (all ptrs)')
Token(type='ob', text='(')
Token(type='at', text='continuation')
Token(type='st', text='"cont"')
Token(type='ch', text='#\\k')
Token(type='at', text='7')
Token(type='cb', text=')')
Token(type='lc', text=';')
Token(type='ob', text='(')
Token(type='at', text='code')
Token(type='st', text='"code"')
Token(type='ch', text='#\\c')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='lc', text=';')
Token(type='ob', text='(')
Token(type='at', text='pure-typed-object')
Token(type='st', text='"p-tobj"')
Token(type='ch', text='#\\r')
Token(type='at', text='9')
Token(type='cb', text=')')
Token(type='lc', text=';')
Token(type='ob', text='(')
Token(type='at', text='impure-record')
Token(type='st', text='"ip-rec"')
Token(type='ch', text='#\\s')
Token(type='at', text='10')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text=';')
Token(type='ob', text='(')
Token(type='at', text='unswept')
Token(type='ob', text='(')
Token(type='at', text='data')
Token(type='st', text='"data"')
Token(type='ch', text='#\\d')
Token(type='at', text='11')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; unswept objects allocated here')
Token(type='ob', text='(')
Token(type='at', text='unreal')
Token(type='ob', text='(')
Token(type='at', text='empty')
Token(type='st', text='"empty"')
Token(type='ch', text='#\\e')
Token(type='at', text='12')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; available segments')
Token(type='nl', text='\n')
Token(type='lc', text=';;; enumeration of types for which gc tracks object counts')
Token(type='lc', text=';;; also update gc.c')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-pair')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-symbol')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-flonum')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-closure')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-continuation')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-bignum')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-ratnum')
Token(type='at', text='6')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-inexactnum')
Token(type='at', text='7')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-exactnum')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-box')
Token(type='at', text='9')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-port')
Token(type='at', text='10')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-code')
Token(type='at', text='11')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-thread')
Token(type='at', text='12')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-tlc')
Token(type='at', text='13')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-rtd-counts')
Token(type='at', text='14')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-stack')
Token(type='at', text='15')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-relocation-table')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-weakpair')
Token(type='at', text='17')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-vector')
Token(type='at', text='18')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-string')
Token(type='at', text='19')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-fxvector')
Token(type='at', text='20')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-bytevector')
Token(type='at', text='21')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-locked')
Token(type='at', text='22')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-guardian')
Token(type='at', text='23')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-oblist')
Token(type='at', text='24')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-ephemeron')
Token(type='at', text='25')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='countof-types')
Token(type='at', text='26')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; type-fixnum is assumed to be all zeros by at least by vector, fxvector,')
Token(type='lc', text=';;; and bytevector index checks')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-fixnum')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='lc', text='; #b100/#b000 32-bit, #b000 64-bit')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-pair')
Token(type='at', text='#b001')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-flonum')
Token(type='at', text='#b010')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-symbol')
Token(type='at', text='#b011')
Token(type='cb', text=')')
Token(type='lc', text='; #b100 occupied by fixnums on 32-bit machines, unused on 64-bit machines')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-closure')
Token(type='at', text='#b101')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-immediate')
Token(type='at', text='#b110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-typed-object')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; note: for type-char, leave at least fixnum-offset zeros at top of')
Token(type='lc', text=';;; type byte to simplify char->integer conversion')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-boolean')
Token(type='at', text='#b00000110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='sfalse')
Token(type='at', text='#b00000110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='strue')
Token(type='at', text='#b00001110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-char')
Token(type='at', text='#b00010110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='sunbound')
Token(type='at', text='#b00011110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='snil')
Token(type='at', text='#b00100110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='forward-marker')
Token(type='at', text='#b00101110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='seof')
Token(type='at', text='#b00110110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='svoid')
Token(type='at', text='#b00111110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='black-hole')
Token(type='at', text='#b01000110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='sbwp')
Token(type='at', text='#b01001110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ptr')
Token(type='at', text='ftype-guardian-rep')
Token(type='at', text='#b01010110')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; on 32-bit machines, vectors get two primary tag bits, including')
Token(type='lc', text=';;; one for the immutable flag, and so do bytevectors, so their maximum')
Token(type='lc', text=';;; lengths are equal to the most-positive fixnum on 32-bit machines.')
Token(type='lc', text=';;; strings and fxvectors get only one primary tag bit each and have')
Token(type='lc', text=';;; to use a different bit for the immutable flag, so their maximum')
Token(type='lc', text=';;; lengths are equal to 1/2 of the most-positive fixnum on 32-bit')
Token(type='lc', text=';;; machines.  taking sizes of vector, bytevector, string, and fxvector')
Token(type='lc', text=';;; elements into account, a vector can occupy up to 1/2 of virtual')
Token(type='lc', text=';;; memory, a string or fxvector up to 1/4, and a bytevector up to 1/8.')
Token(type='nl', text='\n')
Token(type='lc', text=';;; on 64-bit machines, vectors get only one of the primary tag bits,')
Token(type='lc', text=";;; bytevectors still get two (but don't need two), and strings and")
Token(type='lc', text=';;; fxvectors still get one.  all have maximum lengths equal to the')
Token(type='lc', text=';;; most-positive fixnum.')
Token(type='nl', text='\n')
Token(type='lc', text=';;; vector type/length field must look like a fixnum.  an immutable bit sits just above the fixnum tag, with the length above that.')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-vector')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; #b000 occupied by vectors on 32- and 64-bit machines')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-bytevector')
Token(type='at', text='#b01')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-string')
Token(type='at', text='#b010')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-fxvector')
Token(type='at', text='#b011')
Token(type='cb', text=')')
Token(type='lc', text='; #b100 occupied by vectors on 32-bit machines, unused on 64-bit machines')
Token(type='lc', text='; #b101 occupied by type-immutable-bytevector')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-other-number')
Token(type='at', text='#b0110')
Token(type='cb', text=')')
Token(type='lc', text='; bit 3 reset for numbers')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-bignum')
Token(type='at', text='#b00110')
Token(type='cb', text=')')
Token(type='lc', text='; bit 4 reset for bignums')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-positive-bignum')
Token(type='at', text='#b000110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-negative-bignum')
Token(type='at', text='#b100110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-ratnum')
Token(type='at', text='#b00010110')
Token(type='cb', text=')')
Token(type='lc', text='; bit 4 set for non-bignum numbers')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-inexactnum')
Token(type='at', text='#b00110110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-exactnum')
Token(type='at', text='#b01010110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-box')
Token(type='at', text='#b0001110')
Token(type='cb', text=')')
Token(type='lc', text='; bit 3 set for non-numbers')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-immutable-box')
Token(type='at', text='#b10001110')
Token(type='cb', text=')')
Token(type='lc', text='; low 7 bits match `type-box`')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-port')
Token(type='at', text='#b00011110')
Token(type='cb', text=')')
Token(type='lc', text='; #b00101110 (forward_marker) must not be used')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-code')
Token(type='at', text='#b00111110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-thread')
Token(type='at', text='#b01001110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-tlc')
Token(type='at', text='#b01011110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-rtd-counts')
Token(type='at', text='#b01101110')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-record')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='code-flag-system')
Token(type='at', text='#b0001')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='code-flag-continuation')
Token(type='at', text='#b0010')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='code-flag-template')
Token(type='at', text='#b0100')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fixnum-bits')
Token(type='ob', text='(')
Token(type='at', text='case')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text='61')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text='30')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'fixnum-bits")
Token(type='st', text='"expected reasonable native bit width (eg. 32 or 64)"')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='iptr')
Token(type='at', text='most-positive-fixnum')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fixnum-bits')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='iptr')
Token(type='at', text='most-negative-fixnum')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fixnum-bits')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fixnum-offset')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fixnum-bits')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; string length field (high bits) + immutabilty is stored with type')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='string-length-offset')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='string-immutable-flag')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='string-length-offset')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='iptr')
Token(type='at', text='maximum-string-length')
Token(type='ob', text='(')
Token(type='at', text='min')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='string-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='most-positive-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bignum-sign-offset')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bignum-length-offset')
Token(type='at', text='6')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='iptr')
Token(type='at', text='maximum-bignum-length')
Token(type='ob', text='(')
Token(type='at', text='min')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bignum-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='most-positive-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bigit-bits')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bigit-bytes')
Token(type='ob', text='(')
Token(type='at', text='/')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bigit-bits')
Token(type='cb', text=')')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; vector length field (high bits) + immutabilty is stored with type')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='vector-length-offset')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fixnum-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='vector-immutable-flag')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='vector-length-offset')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='iptr')
Token(type='at', text='maximum-vector-length')
Token(type='ob', text='(')
Token(type='at', text='min')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='vector-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='most-positive-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; fxvector length field (high bits) + immutabilty is stored with type')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fxvector-length-offset')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fxvector-immutable-flag')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fxvector-length-offset')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='iptr')
Token(type='at', text='maximum-fxvector-length')
Token(type='ob', text='(')
Token(type='at', text='min')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fxvector-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='most-positive-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; bytevector length field (high bits) + immutabilty is stored with type')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bytevector-length-offset')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bytevector-immutable-flag')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bytevector-length-offset')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='iptr')
Token(type='at', text='maximum-bytevector-length')
Token(type='ob', text='(')
Token(type='at', text='min')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bytevector-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='most-positive-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='code-flags-offset')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ordinary-type-bits')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='char-data-offset')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-binary-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-binary')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-textual-port')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-input-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-input')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-binary-input-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-binary')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-input-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-textual-input-port')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-input-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-output-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-output')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-binary-output-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-binary')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-output-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-textual-output-port')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-output-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-io-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-input-port')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-output-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-system-code')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-code')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flag-system')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-continuation-code')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-code')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flag-continuation')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';; type checks are generally performed by applying the mask to the object')
Token(type='lc', text=';; then comparing against the type code.  a mask equal to')
Token(type='lc', text=';; (constant byte-constant-mask) implies that the object being')
Token(type='lc', text=';; type-checked must have zeros in all but the low byte if it is to pass')
Token(type='lc', text=';; the check so that anything between a byte and full word comparison')
Token(type='lc', text=';; can be used.')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='byte-constant-mask')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bits')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-fixnum')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fixnum-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; octets are fixnums in the range 0..255')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-octet')
Token(type='ob', text='(')
Token(type='at', text='lognot')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='at', text='#xff')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fixnum-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-octet')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-pair')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-flonum')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-symbol')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-closure')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-immediate')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-typed-object')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-boolean')
Token(type='at', text='#b11110111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-char')
Token(type='at', text='#xFF')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-false')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-eof')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-unbound')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-nil')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-bwp')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; vector type/length field must look like a fixnum.  an immutable bit sits just above the fixnum tag, with the length above that.')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-vector')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-bytevector')
Token(type='at', text='#b11')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-string')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-fxvector')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-other-number')
Token(type='at', text='#b1111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-bignum')
Token(type='at', text='#b11111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-bignum-sign')
Token(type='at', text='#b100000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-signed-bignum')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-bignum')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-bignum-sign')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-ratnum')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-inexactnum')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-exactnum')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-rtd-counts')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-record')
Token(type='at', text='#b111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-port')
Token(type='at', text='#xFF')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-binary-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-binary')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-textual-port')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-binary-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-input-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-input')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-binary-input-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-binary')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-input-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-textual-input-port')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-binary-input-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-output-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-output')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-binary-output-port')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flag-binary')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='port-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-output-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-textual-output-port')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-binary-output-port')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-box')
Token(type='at', text='#x7F')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-code')
Token(type='at', text='#xFF')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-system-code')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flag-system')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-continuation-code')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flag-continuation')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='code-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-thread')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-tlc')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-mutable-vector')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-vector')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-immutable-vector')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-vector')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='vector-immutable-flag')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-mutable-vector')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-vector')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='vector-immutable-flag')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-mutable-string')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-string')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-immutable-string')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-string')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='string-immutable-flag')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-mutable-string')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-string')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='string-immutable-flag')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-mutable-fxvector')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-fxvector')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-immutable-fxvector')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-fxvector')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fxvector-immutable-flag')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-mutable-fxvector')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-fxvector')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fxvector-immutable-flag')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-mutable-bytevector')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-bytevector')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-immutable-bytevector')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-bytevector')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bytevector-immutable-flag')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-mutable-bytevector')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-bytevector')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bytevector-immutable-flag')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='type-mutable-box')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-box')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='mask-mutable-box')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-constant-mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fixnum-factor')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fixnum-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='vector-length-factor')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='vector-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='string-length-factor')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='string-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bignum-length-factor')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bignum-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='fxvector-length-factor')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fxvector-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bytevector-length-factor')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bytevector-length-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='char-factor')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='char-data-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; record-datatype must be defined before we include layout.ss')
Token(type='lc', text=';;; (maybe should move into that file??)')
Token(type='lc', text=';;; We allow Scheme inputs for both signed and unsigned integers to range from')
Token(type='lc', text=';;; -2^(b-1)..2^b-1, e.g., for 32-bit, -2^31..2^32-1.')
Token(type='ob', text='(')
Token(type='at', text='macro-define-structure')
Token(type='ob', text='(')
Token(type='at', text='fld')
Token(type='at', text='name')
Token(type='at', text='mutable?')
Token(type='at', text='type')
Token(type='at', text='byte')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='compile')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='foreign-datatypes')
Token(type='ob', text='(')
Token(type='at', text='identifier-syntax')
Token(type='ob', text="'(")
Token(type='ob', text='(')
Token(type='at', text='scheme-object')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='double-float')
Token(type='at', text='8')
Token(type='at', text='flonum?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='single-float')
Token(type='at', text='4')
Token(type='at', text='flonum?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-8')
Token(type='at', text='1')
Token(type='at', text='$integer-8?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-8')
Token(type='at', text='1')
Token(type='at', text='$integer-8?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-16')
Token(type='at', text='2')
Token(type='at', text='$integer-16?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-16')
Token(type='at', text='2')
Token(type='at', text='$integer-16?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-24')
Token(type='at', text='3')
Token(type='at', text='$integer-24?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-24')
Token(type='at', text='3')
Token(type='at', text='$integer-24?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-32')
Token(type='at', text='4')
Token(type='at', text='$integer-32?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-32')
Token(type='at', text='4')
Token(type='at', text='$integer-32?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-40')
Token(type='at', text='5')
Token(type='at', text='$integer-40?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-40')
Token(type='at', text='5')
Token(type='at', text='$integer-40?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-48')
Token(type='at', text='6')
Token(type='at', text='$integer-48?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-48')
Token(type='at', text='6')
Token(type='at', text='$integer-48?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-56')
Token(type='at', text='7')
Token(type='at', text='$integer-56?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-56')
Token(type='at', text='7')
Token(type='at', text='$integer-56?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer-64')
Token(type='at', text='8')
Token(type='at', text='$integer-64?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-64')
Token(type='at', text='8')
Token(type='at', text='$integer-64?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fixnum')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='at', text='fixnum?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char')
Token(type='at', text='1')
Token(type='at', text='$foreign-char?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='wchar')
Token(type='ob', text='(')
Token(type='at', text='fxsrl')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='wchar-bits')
Token(type='cb', text=')')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='at', text='$foreign-wchar?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='boolean')
Token(type='ob', text='(')
Token(type='at', text='fxsrl')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='int-bits')
Token(type='cb', text=')')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='record-datatype')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='type')
Token(type='at', text='bytes')
Token(type='at', text='pred')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'*")
Token(type='at', text='foreign-datatypes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='list')
Token(type='at', text='cases')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='list')
Token(type='cb', text=')')
Token(type='ob', text="#''(")
Token(type='at', text='type')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='cases')
Token(type='at', text='ty')
Token(type='at', text='handler')
Token(type='at', text='else-expr')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='case')
Token(type='at', text='ty')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='type')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='handler')
Token(type='at', text='type')
Token(type='at', text='bytes')
Token(type='at', text='pred')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='at', text='else-expr')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='c-alloc-align')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogand')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='at', text='n')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-alignment')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlognot')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='byte-alignment')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='compile')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='filter-foreign-type')
Token(type='lc', text='; for $object-ref, foreign-ref, etc.')
Token(type='lc', text='; foreign-procedure and foriegn-callable have their own')
Token(type='lc', text='; filter-type in syntax.ss')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='alist')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'*")
Token(type='ob', text='`(')
Token(type='ob', text='(')
Token(type='at', text='ptr')
Token(type='at', text='.')
Token(type='at', text='scheme-object')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='iptr')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='ptr-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'integer-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'integer-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='uptr')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='ptr-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='void*')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='ptr-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='int')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='int-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'integer-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'integer-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='int-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-int')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='int-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='short')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='short-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='at', text="'integer-16")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'integer-32")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-short')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='short-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-16")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='long')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='long-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'integer-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'integer-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-long')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='long-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='long-long')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='long-long-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'integer-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsigned-long-long')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='long-long-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='wchar_t')
Token(type='at', text='.')
Token(type='at', text='wchar')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='size_t')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='size_t-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ssize_t')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='size_t-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'integer-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'integer-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ptrdiff_t')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='ptrdiff_t-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'integer-32")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='at', text="'integer-64")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='float')
Token(type='at', text='.')
Token(type='at', text='single-float')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='double')
Token(type='at', text='.')
Token(type='at', text='double-float')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='x')
Token(type='at', text='?x')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cond')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='assq')
Token(type='at', text='x')
Token(type='at', text="'alist")
Token(type='cb', text=')')
Token(type='at', text='=>')
Token(type='at', text='cdr')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='at', text='x')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='filter-scheme-type')
Token(type='lc', text='; for define-primitive-structure-disps')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='alist')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'*")
Token(type='ob', text='`(')
Token(type='ob', text='(')
Token(type='at', text='byte')
Token(type='at', text='.')
Token(type='at', text='signed-8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='octet')
Token(type='at', text='.')
Token(type='at', text='unsigned-8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='I32')
Token(type='at', text='.')
Token(type='at', text='integer-32')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='U32')
Token(type='at', text='.')
Token(type='at', text='unsigned-32')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='I64')
Token(type='at', text='.')
Token(type='at', text='integer-64')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='U64')
Token(type='at', text='.')
Token(type='at', text='unsigned-64')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bigit')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='bigit-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-16")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string-char')
Token(type='at', text='.')
Token(type='ob', text=',(')
Token(type='at', text='constant-case')
Token(type='at', text='string-char-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='at', text="'unsigned-32")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='x')
Token(type='at', text='?x')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cond')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='assq')
Token(type='at', text='x')
Token(type='at', text="'alist")
Token(type='cb', text=')')
Token(type='at', text='=>')
Token(type='at', text='cdr')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='at', text='x')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-primitive-structure-disps')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='include')
Token(type='st', text='"layout.ss"')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='make-name-field-disp')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='field-name')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text='name')
Token(type='at', text='name')
Token(type='st', text='"-"')
Token(type='at', text='field-name')
Token(type='st', text='"-disp"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='split')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ls')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='list')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='rest')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='list')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='rest')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cadr')
Token(type='at', text='rest')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='get-fld-byte')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='fn')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='loop')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='flds')
Token(type='at', text='flds')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='fld')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='eq?')
Token(type='ob', text='(')
Token(type='at', text='fld-name')
Token(type='at', text='fld')
Token(type='cb', text=')')
Token(type='at', text='fn')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fld-byte')
Token(type='at', text='fld')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='loop')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='parse-field')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='field')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='field')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='field-type')
Token(type='at', text='field-name')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='list')
Token(type='at', text="#'field-type")
Token(type='at', text="#'field-name")
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='field-type')
Token(type='at', text='field-name')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='integer?')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='list')
Token(type='at', text="#'field-type")
Token(type='at', text="#'field-name")
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='field-type')
Token(type='at', text='field-name')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='sym')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='list')
Token(type='at', text="#'field-type")
Token(type='at', text="#'field-name")
Token(type='ob', text='(')
Token(type='at', text='lookup-constant')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='sym')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='name')
Token(type='at', text='type')
Token(type='ob', text='(')
Token(type='at', text='field1')
Token(type='at', text='field2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='identifier?')
Token(type='ob', text="#'(")
Token(type='at', text='name')
Token(type='at', text='type')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='field-type')
Token(type='at', text='field-name')
Token(type='at', text='field-length')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='parse-field')
Token(type='ob', text="#'(")
Token(type='at', text='field1')
Token(type='at', text='field2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-values')
Token(type='ob', text='(')
Token(type='at', text='compute-field-offsets')
Token(type='at', text="'define-primitive-structure-disps")
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='typemod')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lookup-constant')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='type')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='type')
Token(type='at', text='name')
Token(type='at', text='len')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='list')
Token(type='ob', text='(')
Token(type='at', text='filter-scheme-type')
Token(type='at', text='type')
Token(type='cb', text=')')
Token(type='at', text='name')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='len')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='field-type')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='field-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='field-length')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='pm')
Token(type='at', text='mpm')
Token(type='at', text='flds')
Token(type='at', text='size')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='var?')
Token(type='ob', text='(')
Token(type='at', text='eq?')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='ob', text='(')
Token(type='at', text='last-pair')
Token(type='ob', text="#'(")
Token(type='at', text='field-length')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='name-field-disp')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='fn')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='make-name-field-disp')
Token(type='at', text="#'name")
Token(type='at', text='fn')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='field-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='field-disp')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='fn')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='get-fld-byte')
Token(type='at', text='fn')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='field-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='size')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='at', text='var?')
Token(type='at', text='size')
Token(type='ob', text='(')
Token(type='at', text='c-alloc-align')
Token(type='at', text='size')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='size-name')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'name")
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='at', text='var?')
Token(type='st', text='"header-size-"')
Token(type='st', text='"size-"')
Token(type='cb', text=')')
Token(type='at', text="#'name")
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='putprop')
Token(type='at', text="'name")
Token(type='at', text="'*fields*")
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='list')
Token(type='ob', text="'(")
Token(type='at', text='field-name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='field-type')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='field-disp')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='field-length')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='size-name')
Token(type='at', text='size')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='name-field-disp')
Token(type='at', text='field-disp')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='typed-object')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='pair')
Token(type='at', text='type-pair')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='car')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='cdr')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='pair-shift')
Token(type='ob', text='(')
Token(type='at', text='log2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='size-pair')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='box')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='ref')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='ephemeron')
Token(type='at', text='type-pair')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='car')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='cdr')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='next')
Token(type='cb', text=']')
Token(type='lc', text='; `next` is needed by the GC to keep track of pending ephemerons')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='trigger-next')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; `trigger-next` is similar, but for segment-specific lists')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='tlc')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='keyval')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='ht')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='next')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='symbol')
Token(type='at', text='type-symbol')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='value')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='pvalue')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='plist')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='name')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='splist')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='hash')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='ratnum')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='numerator')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='denominator')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='vector')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='fxvector')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='constant-case')
Token(type='at', text='ptr-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='bytevector')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='pad')
Token(type='cb', text=']')
Token(type='lc', text='; pad needed to maintain double-word alignment for data')
Token(type='ob', text='[')
Token(type='at', text='octet')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='bytevector')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='octet')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; WARNING: implementation of real-part and imag-part assumes that')
Token(type='lc', text='; flonums are subobjects of inexactnums.')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='flonum')
Token(type='at', text='type-flonum')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='double')
Token(type='at', text='data')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; on 32-bit systems, the iptr pad will have no effect above and')
Token(type='lc', text='; beyond the normal padding.  on 64-bit systems, the pad')
Token(type='lc', text='; guarantees that the forwarding address will not overwrite')
Token(type='lc', text='; real-part, which may share storage with a flonum that has')
Token(type='lc', text='; not yet been forwarded.')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='inexactnum')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='pad')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='double')
Token(type='at', text='real')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='double')
Token(type='at', text='imag')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='exactnum')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='real')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='imag')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='closure')
Token(type='at', text='type-closure')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='code')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='port')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='handler')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='ocount')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='icount')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='olast')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='obuffer')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='ilast')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='ibuffer')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='info')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='name')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='string')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='string-char')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='bignum')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='bigit')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='code')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='length')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='reloc')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='name')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='arity-mask')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='closure-length')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='info')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='pinfo*')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='octet')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='reloc-table')
Token(type='at', text='typemod')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='size')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='code')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='uptr')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='continuation')
Token(type='at', text='type-closure')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='code')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='stack')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='stack-length')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='stack-clength')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='link')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='return-address')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='winders')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='record')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='data')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='thread')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='uptr')
Token(type='at', text='tc')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='virtual-register-count')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; make sure gc sweeps all ptrs')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='tc')
Token(type='at', text='typemod')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='arg-regs')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='asm-arg-reg-max')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='ac0')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='ac1')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='sfp')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='cp')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='esp')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='ap')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='eap')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='ret')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='trap')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='xp')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='yp')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='ts')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='td')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='real_eap')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='virtual-registers')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='virtual-register-count')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='guardian-entries')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='cchain')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='code-ranges-to-flush')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='U32')
Token(type='at', text='random-seed')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='I32')
Token(type='at', text='active')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='scheme-stack')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='stack-cache')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='stack-link')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='scheme-stack-size')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='winders')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='U')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='V')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='W')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='X')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='Y')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='something-pending')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='timer-ticks')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='disable-count')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='signal-interrupt-pending')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='keyboard-interrupt-pending')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='threadno')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='current-input')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='current-output')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='current-error')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='block-counter')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='sfd')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='current-mso')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='target-machine')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='fxlength-bv')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='fxfirst-bit-set-bv')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='null-immutable-vector')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='null-immutable-fxvector')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='null-immutable-bytevector')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='null-immutable-string')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='meta-level')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='compile-profile')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='generate-inspector-information')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='generate-procedure-source-information')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='generate-profile-forms')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='optimize-level')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='subset-mode')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='suppress-primitive-inlining')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='default-record-equal-procedure')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='default-record-hash-procedure')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='compress-format')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='compress-level')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='void*')
Token(type='at', text='lz4-out-buffer')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='U64')
Token(type='at', text='instr-counter')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='U64')
Token(type='at', text='alloc-counter')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='parameters')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='tc-field-list')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ls')
Token(type='ob', text='(')
Token(type='at', text='oblist')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='params')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='at', text='params')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let*')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='sym')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='str')
Token(type='ob', text='(')
Token(type='at', text='symbol->string')
Token(type='at', text='sym')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='n')
Token(type='ob', text='(')
Token(type='at', text='string-length')
Token(type='at', text='str')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='>')
Token(type='at', text='n')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string=?')
Token(type='ob', text='(')
Token(type='at', text='substring')
Token(type='at', text='str')
Token(type='at', text='0')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='st', text='"tc-"')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string=?')
Token(type='ob', text='(')
Token(type='at', text='substring')
Token(type='at', text='str')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='at', text='n')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='st', text='"-disp"')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='getprop')
Token(type='at', text='sym')
Token(type='at', text="'*constant*")
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='ob', text='(')
Token(type='at', text='string->symbol')
Token(type='ob', text='(')
Token(type='at', text='substring')
Token(type='at', text='str')
Token(type='at', text='3')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='at', text='n')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='params')
Token(type='cb', text=')')
Token(type='at', text='params')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='unactivate-mode-noop')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='unactivate-mode-deactivate')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='unactivate-mode-destroy')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='rtd-counts')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='U64')
Token(type='at', text='timestamp')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='uptr')
Token(type='at', text='data')
Token(type='at', text='256')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='record-type')
Token(type='at', text='type-typed-object')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='type')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='parent')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='size')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='pm')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='mpm')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='name')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='flds')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='flags')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='uid')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='counts')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='rtd-generative')
Token(type='at', text='#b0001')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='rtd-opaque')
Token(type='at', text='#b0010')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='rtd-sealed')
Token(type='at', text='#b0100')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; we do this as a macro here since we want the freshest version possible')
Token(type='lc', text='; in syntax.ss when we use it as a patch, whereas we want the old')
Token(type='lc', text='; version in non-patched record.ss, so he can operate on host-system')
Token(type='lc', text='; record types.')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='make-record-call-args')
Token(type='ob', text='(')
Token(type='at', text='identifier-syntax')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='flds')
Token(type='at', text='size')
Token(type='at', text='e*')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='flds')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='b')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='record-data-disp')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='e*')
Token(type='at', text='e*')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='<')
Token(type='at', text='b')
Token(type='ob', text='(')
Token(type='at', text='+')
Token(type='at', text='size')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='record-type-disp')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='at', text='0')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='at', text='flds')
Token(type='ob', text='(')
Token(type='at', text='+')
Token(type='at', text='b')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='e*')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='fld')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cond')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='<')
Token(type='at', text='b')
Token(type='ob', text='(')
Token(type='at', text='fld-byte')
Token(type='at', text='fld')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='at', text='0')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='at', text='flds')
Token(type='ob', text='(')
Token(type='at', text='+')
Token(type='at', text='b')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='e*')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='>')
Token(type='at', text='b')
Token(type='ob', text='(')
Token(type='at', text='fld-byte')
Token(type='at', text='fld')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='at', text='b')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='e*')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='lc', text='; (= b (fld-byte fld))')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='eq?')
Token(type='ob', text='(')
Token(type='at', text='filter-foreign-type')
Token(type='ob', text='(')
Token(type='at', text='fld-type')
Token(type='at', text='fld')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text="'scheme-object")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='e*')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='flds')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='+')
Token(type='at', text='b')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='e*')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='guardian-entry')
Token(type='at', text='typemod')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='obj')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='rep')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='tconc')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='next')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; forwarding addresses are recorded with a single forward-marker')
Token(type='lc', text=';;; bit pattern (a special Scheme object) followed by the forwarding')
Token(type='lc', text=';;; address, a ptr to the forwarded object.')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='forward')
Token(type='at', text='typemod')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='marker')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='address')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='cached-stack')
Token(type='at', text='typemod')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='size')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='link')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-primitive-structure-disps')
Token(type='at', text='rp-header')
Token(type='at', text='typemod')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ptr')
Token(type='at', text='livemask')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='uptr')
Token(type='at', text='toplink')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='iptr')
Token(type='at', text='frame-size')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='uptr')
Token(type='at', text='mv-return-address')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='return-address-mv-return-address-disp')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='rp-header-mv-return-address-disp')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='size-rp-header')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='return-address-frame-size-disp')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='rp-header-frame-size-disp')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='size-rp-header')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='return-address-toplink-disp')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='rp-header-toplink-disp')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='size-rp-header')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='return-address-livemask-disp')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='rp-header-livemask-disp')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='size-rp-header')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='bigit-type')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='type')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'*")
Token(type='ob', text='(')
Token(type='at', text='filter-scheme-type')
Token(type='at', text="'bigit")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='at', text="#''type")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='string-char-type')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='type')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'*")
Token(type='ob', text='(')
Token(type='at', text='filter-scheme-type')
Token(type='at', text="'string-char")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='at', text="#''type")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='annotation-debug')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='annotation-profile')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='compile')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='flag->mask')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='m')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cond')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='fixnum?')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='at', text='m')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='symbol?')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='assq')
Token(type='at', text='m')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='=>')
Token(type='at', text='cdr')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='list?')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eq?')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='at', text="'or")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='ls')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='ob', text='(')
Token(type='at', text='flag->mask')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='list?')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eq?')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='at', text="'sll")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='=')
Token(type='ob', text='(')
Token(type='at', text='length')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='ob', text='(')
Token(type='at', text='flag->mask')
Token(type='ob', text='(')
Token(type='at', text='cadr')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lookup-constant')
Token(type='ob', text='(')
Token(type='at', text='caddr')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'flag->mask")
Token(type='st', text='"invalid mask ~s"')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-flags')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='exp')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='mask-environment')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='flags')
Token(type='at', text='masks')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='flags')
Token(type='at', text='flags')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='masks')
Token(type='at', text='masks')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='e')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='flags')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='mask')
Token(type='ob', text='(')
Token(type='at', text='flag->mask')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='masks')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='flags')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='masks')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='ob', text='`(')
Token(type='ob', text=',(')
Token(type='at', text='car')
Token(type='at', text='flags')
Token(type='cb', text=')')
Token(type='at', text='.')
Token(type='at', text=',mask')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='exp')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_k')
Token(type='at', text='name')
Token(type='ob', text='(')
Token(type='at', text='flag')
Token(type='at', text='mask')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='env')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'_k")
Token(type='ob', text='(')
Token(type='at', text='mask-environment')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='flag')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='mask')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='define-syntax')
Token(type='at', text='name')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_k')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'_k")
Token(type='ob', text='(')
Token(type='at', text='flag->mask')
Token(type='ob', text='`(')
Token(type='at', text='or')
Token(type='ob', text=',@(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text="'env")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='any-set?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='mask')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='not')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='ob', text='(')
Token(type='at', text='fxlogand')
Token(type='at', text='mask')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='all-set?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='mask')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='m')
Token(type='at', text='mask')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='ob', text='(')
Token(type='at', text='fxlogand')
Token(type='at', text='m')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='at', text='m')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='set-flags')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='mask')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='at', text='mask')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='reset-flags')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='mask')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogand')
Token(type='ob', text='(')
Token(type='at', text='fxlognot')
Token(type='at', text='mask')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; prim-mask notes:')
Token(type='lc', text=';;;  - pure prim can (but need not) return same (by eqv?) value for same')
Token(type='lc', text=';;;    (by eqv?) args and causes no side effects')
Token(type='lc', text=';;;  - pure is not set when primitive can cause an effect, observe an effect,')
Token(type='lc', text=';;;    or allocate a mutable object.  So set-car!, car, cons, equal?, and')
Token(type='lc', text=';;;    list? are not pure, while pair?, +, <, and char->integer are pure.')
Token(type='lc', text=';;;  - an mifoldable primitive can be folded in a machine-independent way')
Token(type='lc', text=";;;    when it gets constant arguments.  we don't fold primitives that depend")
Token(type='lc', text=';;;    on machine characteristics, like most-positive-fixnum.  (but we do')
Token(type='lc', text=';;;    have cp0 handlers for almost all of them that do the right thing.)')
Token(type='lc', text=';;;  - mifoldable does not imply pure.  can fold car when it gets a constant')
Token(type='lc', text=';;;    (and thus immutable) argument, but it is not pure.')
Token(type='lc', text=';;;  - pure does not imply mifoldable, since a pure primitive might not be')
Token(type='lc', text=';;;    machine-independent.')
Token(type='ob', text='(')
Token(type='at', text='define-flags')
Token(type='at', text='prim-mask')
Token(type='ob', text='(')
Token(type='at', text='system')
Token(type='at', text='#b00000000000000000000001')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='primitive')
Token(type='at', text='#b00000000000000000000010')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='keyword')
Token(type='at', text='#b00000000000000000000100')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='r5rs')
Token(type='at', text='#b00000000000000000001000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ieee')
Token(type='at', text='#b00000000000000000010000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='proc')
Token(type='at', text='#b00000000000000000100000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='discard')
Token(type='at', text='#b00000000000000001000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unrestricted')
Token(type='at', text='#b00000000000000010000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='true')
Token(type='at', text='#b00000000000000100000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='mifoldable')
Token(type='at', text='#b00000000000001000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cp02')
Token(type='at', text='#b00000000000010000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cp03')
Token(type='at', text='#b00000000000100000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='system-keyword')
Token(type='at', text='#b00000000001000000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='r6rs')
Token(type='at', text='#b00000000010000000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='pure')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='#b00000000100000000000000')
Token(type='at', text='discard')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='library-uid')
Token(type='at', text='#b00000001000000000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='boolean-valued')
Token(type='at', text='#b00000010000000000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='abort-op')
Token(type='at', text='#b00000100000000000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe')
Token(type='at', text='#b00001000000000000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='arith-op')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='proc')
Token(type='at', text='pure')
Token(type='at', text='true')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='alloc')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='proc')
Token(type='at', text='discard')
Token(type='at', text='true')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; would be nice to check that these and only these actually have cp0 partial folders')
Token(type='ob', text='(')
Token(type='at', text='partial-folder')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='cp02')
Token(type='at', text='cp03')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-flags')
Token(type='at', text='cp0-info-mask')
Token(type='ob', text='(')
Token(type='at', text='pure-known')
Token(type='at', text='#b0000000001')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='pure')
Token(type='at', text='#b0000000010')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ivory-known')
Token(type='at', text='#b0000000100')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ivory')
Token(type='at', text='#b0000001000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='simple-known')
Token(type='at', text='#b0000010000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='simple')
Token(type='at', text='#b0000100000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='boolean-valued-known')
Token(type='at', text='#b0001000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='boolean-valued')
Token(type='at', text='#b0010000000')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-flag-field')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='exp')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='exp')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='struct')
Token(type='at', text='field')
Token(type='ob', text='(')
Token(type='at', text='flag')
Token(type='at', text='mask')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='getter-name')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'k")
Token(type='at', text="#'struct")
Token(type='st', text='"-"')
Token(type='at', text='f')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='setter-name')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'k")
Token(type='st', text='"set-"')
Token(type='at', text="#'struct")
Token(type='st', text='"-"')
Token(type='at', text='f')
Token(type='st', text='"!"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='field-ref')
Token(type='ob', text='(')
Token(type='at', text='getter-name')
Token(type='at', text="#'field")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='field-set!')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'k")
Token(type='at', text="#'struct")
Token(type='st', text='"-"')
Token(type='at', text="#'field")
Token(type='st', text='"-set!"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='flag-ref')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='getter-name')
Token(type='ob', text="#'(")
Token(type='at', text='flag')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='flag-set!')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='setter-name')
Token(type='ob', text="#'(")
Token(type='at', text='flag')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='f->m')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'k")
Token(type='at', text="#'struct")
Token(type='st', text='"-"')
Token(type='at', text="#'field")
Token(type='st', text='"-mask"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='define-flags')
Token(type='at', text='f->m')
Token(type='ob', text='(')
Token(type='at', text='flag')
Token(type='at', text='mask')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='flag-ref')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='kk')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='kk')
Token(type='at', text='field-ref')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='any-set?')
Token(type='ob', text='(')
Token(type='at', text='f->m')
Token(type='at', text='flag')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='field-ref')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='flag-set!')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='kk')
Token(type='at', text='x')
Token(type='at', text='bool')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='kk')
Token(type='at', text='field-ref')
Token(type='at', text='field-set!')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='t')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='field-set!')
Token(type='at', text='t')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='at', text='bool')
Token(type='ob', text='(')
Token(type='at', text='set-flags')
Token(type='ob', text='(')
Token(type='at', text='f->m')
Token(type='at', text='flag')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='field-ref')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='reset-flags')
Token(type='ob', text='(')
Token(type='at', text='f->m')
Token(type='at', text='flag')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='field-ref')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; compile-time-environment structures')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='prelex-is-flags-offset')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='prelex-was-flags-offset')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='prelex-sticky-mask')
Token(type='at', text='#b11111111')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='prelex-is-mask')
Token(type='at', text='#b1111111100000000')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-flag-field')
Token(type='at', text='prelex')
Token(type='at', text='flags')
Token(type='lc', text='; sticky flags:')
Token(type='ob', text='(')
Token(type='at', text='immutable-value')
Token(type='at', text='#b0000000000000001')
Token(type='cb', text=')')
Token(type='lc', text='; is flags:')
Token(type='ob', text='(')
Token(type='at', text='assigned')
Token(type='at', text='#b0000000100000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='referenced')
Token(type='at', text='#b0000001000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='seen')
Token(type='at', text='#b0000010000000000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='multiply-referenced')
Token(type='at', text='#b0000100000000000')
Token(type='cb', text=')')
Token(type='lc', text='; was flags:')
Token(type='ob', text='(')
Token(type='at', text='was-assigned')
Token(type='ob', text='(')
Token(type='at', text='sll')
Token(type='at', text='assigned')
Token(type='at', text='prelex-was-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='was-referenced')
Token(type='ob', text='(')
Token(type='at', text='sll')
Token(type='at', text='referenced')
Token(type='at', text='prelex-was-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='was-multiply-referenced')
Token(type='ob', text='(')
Token(type='at', text='sll')
Token(type='at', text='multiply-referenced')
Token(type='at', text='prelex-was-flags-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; aggregate flags:')
Token(type='ob', text='(')
Token(type='at', text='seen/referenced')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='seen')
Token(type='at', text='referenced')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='seen/assigned')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='seen')
Token(type='at', text='assigned')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='referenced/assigned')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='referenced')
Token(type='at', text='assigned')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='macro-define-structure')
Token(type='ob', text='(')
Token(type='at', text='$c-func')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='code-record')
Token(type='at', text='#f')
Token(type='cb', text=']')
Token(type='lc', text='; (code func free ...)')
Token(type='ob', text='[')
Token(type='at', text='code-object')
Token(type='at', text='#f')
Token(type='cb', text=']')
Token(type='lc', text='; actual code object created by c-mkcode')
Token(type='ob', text='[')
Token(type='at', text='closure-record')
Token(type='at', text='#f')
Token(type='cb', text=']')
Token(type='lc', text='; (closure . func), if constant')
Token(type='ob', text='[')
Token(type='at', text='closure')
Token(type='at', text='#f')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; actual closure created by c-mkcode, if constant')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='negated-flonum?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='ob', text='(')
Token(type='at', text='$flonum-sign')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='$nan?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='float-type-case')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='ieee')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='not')
Token(type='ob', text='(')
Token(type='at', text='fl=')
Token(type='at', text='x')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='infinity?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='x')
Token(type='at', text='e')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='float-type-case')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='ieee')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='exceptional-flonum?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='not')
Token(type='ob', text='(')
Token(type='at', text='$nan?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='exceptional-flonum?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='float-type-case')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='ieee')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='ob', text='(')
Token(type='at', text='$flonum-exponent')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='at', text='#x7ff')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='on-reset')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='oops')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$reset-protect')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='at', text='oops')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='$make-thread-parameter')
Token(type='ob', text='(')
Token(type='at', text='if-feature')
Token(type='at', text='pthreads')
Token(type='ob', text='(')
Token(type='at', text='identifier-syntax')
Token(type='at', text='make-thread-parameter')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier-syntax')
Token(type='at', text='make-parameter')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-threaded')
Token(type='ob', text='(')
Token(type='at', text='if-feature')
Token(type='at', text='pthreads')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='var')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-threaded')
Token(type='at', text='var')
Token(type='at', text="'var")
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='var')
Token(type='at', text='expr')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='tmp')
Token(type='ob', text='(')
Token(type='at', text='$make-thread-parameter')
Token(type='at', text='expr')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='var')
Token(type='ob', text='(')
Token(type='at', text='identifier-syntax')
Token(type='ob', text='(')
Token(type='at', text='id')
Token(type='ob', text='(')
Token(type='at', text='tmp')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='set!')
Token(type='at', text='id')
Token(type='at', text='val')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='tmp')
Token(type='at', text='val')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier-syntax')
Token(type='at', text='define')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-syntactic-monad')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='name')
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='identifier?')
Token(type='ob', text="#'(")
Token(type='at', text='name')
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='define-syntax')
Token(type='at', text='name')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='at', text='define')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='key')
Token(type='at', text='lambda')
Token(type='at', text='more-formals')
Token(type='at', text='.')
Token(type='at', text='body')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='key')
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='at', text='.')
Token(type='at', text='more-formals')
Token(type='cb', text=')')
Token(type='at', text='.')
Token(type='at', text='body')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='key')
Token(type='at', text='define')
Token(type='ob', text='(')
Token(type='at', text='proc-name')
Token(type='at', text='.')
Token(type='at', text='more-formals')
Token(type='cb', text=')')
Token(type='at', text='.')
Token(type='at', text='body')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='key')
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='define')
Token(type='at', text='proc-name')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='at', text='.')
Token(type='at', text='more-formals')
Token(type='cb', text=')')
Token(type='at', text='.')
Token(type='at', text='body')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='key')
Token(type='at', text='proc')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='arg')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='identifier?')
Token(type='ob', text="#'(")
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='key')
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='for-each')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='mem')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='ls')
Token(type='ob', text="#'(")
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='not')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='free-identifier=?')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='mem')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-error')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='format')
Token(type='st', text='"undeclared ~s monad binding"')
Token(type='at', text="'name")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='proc')
Token(type='at', text='formal')
Token(type='at', text='...')
Token(type='at', text='arg')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='key')
Token(type='at', text='proc')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='key')
Token(type='at', text='proc')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='make-binding')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='type')
Token(type='at', text='value')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='at', text='type')
Token(type='at', text='value')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='binding-type')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='b')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='b')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='binding-value')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='b')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='b')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='set-binding-type!')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='b')
Token(type='at', text='v')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='set-car!')
Token(type='at', text='b')
Token(type='at', text='v')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='set-binding-value!')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='b')
Token(type='at', text='v')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='set-cdr!')
Token(type='at', text='b')
Token(type='at', text='v')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='binding?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='t')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='pair?')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='symbol?')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; heap/stack mangement constants')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='collect-interrupt-index')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='timer-interrupt-index')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='keyboard-interrupt-index')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='signal-interrupt-index')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='maximum-interrupt-index')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='ignore-event-flag')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='default-timer-ticks')
Token(type='at', text='1000')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='default-collect-trip-bytes')
Token(type='ob', text='(')
Token(type='at', text='expt')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='+')
Token(type='at', text='20')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='log2-ptr-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='default-heap-reserve-ratio')
Token(type='at', text='1.0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='static-generation')
Token(type='at', text='255')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='default-max-nonstatic-generation')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='constant-case')
Token(type='at', text='address-bits')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='32')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant-case')
Token(type='at', text='segment-table-levels')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-t1-bits')
Token(type='at', text='19')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='lc', text='; table size: .5M words = 2M bytes')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-t2-bits')
Token(type='at', text='9')
Token(type='cb', text=')')
Token(type='lc', text='; outer-table size: .5k words = 2k bytes')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-t1-bits')
Token(type='at', text='10')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='lc', text='; inner-table size: 1k words = 4k bytes')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-offset-bits')
Token(type='at', text='13')
Token(type='cb', text=')')
Token(type='lc', text='; segment size: 8k bytes (2k ptrs)')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='card-offset-bits')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='lc', text='; card size: 256 bytes (64 ptrs)')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant-case')
Token(type='at', text='segment-table-levels')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-t2-bits')
Token(type='at', text='25')
Token(type='cb', text=')')
Token(type='lc', text='; outer-table size: 32M words = 268M bytes')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-t1-bits')
Token(type='at', text='25')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='lc', text='; inner-table size: 32M words = 268M bytes')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-t3-bits')
Token(type='at', text='17')
Token(type='cb', text=')')
Token(type='lc', text='; outer-table size: 128k words = 1M bytes')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-t2-bits')
Token(type='at', text='17')
Token(type='cb', text=')')
Token(type='lc', text='; middle-table size: 128k words = 1M bytes')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-t1-bits')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='lc', text='; inner-table size: 64k words = 512k bytes')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-offset-bits')
Token(type='at', text='14')
Token(type='cb', text=')')
Token(type='lc', text='; segment size: 16k bytes (2k ptrs)')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='card-offset-bits')
Token(type='at', text='9')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='lc', text='; card size: 512 bytes (64 ptrs)')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bytes-per-segment')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='segment-offset-bits')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='segment-card-offset-bits')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='segment-offset-bits')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='card-offset-bits')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text=';;; cards-per-segment must be a multiple of ptr-bits, since gc sometimes')
Token(type='lc', text=';;; processes dirty bytes in iptr-sized pieces')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='cards-per-segment')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='segment-card-offset-bits')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='bytes-per-card')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='at', text='1')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='card-offset-bits')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; minimum-segment-request is the minimum number of segments')
Token(type='lc', text=';;; requested from the O/S when Scheme runs out of memory.')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='minimum-segment-request')
Token(type='at', text='128')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; alloc_waste_maximum determines the maximum amount wasted if a large')
Token(type='lc', text=';;; object request or remembered-set scan request is made from Scheme')
Token(type='lc', text=';;; (through S_get_more_room or S_scan_remembered_set).  if more than')
Token(type='lc', text=';;; alloc_maximum_waste bytes remain between ap and eap, ap is left')
Token(type='lc', text=';;; unchanged.')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='alloc-waste-maximum')
Token(type='ob', text='(')
Token(type='at', text='ash')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bytes-per-segment')
Token(type='cb', text=')')
Token(type='at', text='-3')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; default-stack-size determines the length in bytes of the runtime stack')
Token(type='lc', text=';;; used for execution of scheme programs.  Since the stack is extended')
Token(type='lc', text=';;; automatically by copying part of the stack into a continuation,')
Token(type='lc', text=';;; it is not necessary to make the number very large, except for')
Token(type='lc', text=';;; efficiency.  Since the cost of invoking continuations is bounded by')
Token(type='lc', text=';;; default-stack-size, it should not be made excessively large.')
Token(type='lc', text=';;; stack-slop determines how much of the stack is available for routines')
Token(type='lc', text=";;; that use a bounded amount of stack space, and thus don't need to")
Token(type='lc', text=';;; check for stack overflow.')
Token(type='nl', text='\n')
Token(type='lc', text=';; Make default stack size a multiple of the segment size, but leave room for')
Token(type='lc', text=';; two ptrs at the end (a forward marker and a pointer to the next segment of')
Token(type='lc', text=';; this type --- used by garbage collector).')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='default-stack-size')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='ob', text='(')
Token(type='at', text='*')
Token(type='at', text='4')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='bytes-per-segment')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='*')
Token(type='at', text='2')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='stack-slop')
Token(type='ob', text='(')
Token(type='at', text='ceiling')
Token(type='ob', text='(')
Token(type='at', text='/')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='default-stack-size')
Token(type='cb', text=')')
Token(type='at', text='64')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='stack-frame-limit')
Token(type='ob', text='(')
Token(type='at', text='fxsrl')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='stack-slop')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text=';; one-shot-headroom must include stack-slop so min factor below is 2')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='one-shot-headroom')
Token(type='ob', text='(')
Token(type='at', text='fx*')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='stack-slop')
Token(type='cb', text=')')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text=';; shot-1-shot-flag is inserted into continuation length field to mark')
Token(type='lc', text=';; a one-shot continuation shot.  it must look like a negative byte')
Token(type='lc', text=';; offset')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='unscaled-shot-1-shot-flag')
Token(type='at', text='-1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='scaled-shot-1-shot-flag')
Token(type='ob', text='(')
Token(type='at', text='*')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='unscaled-shot-1-shot-flag')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=";;; underflow limit determines how much we're willing to copy on")
Token(type='lc', text=';;; stack underflow/continuation invocation')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='underflow-limit')
Token(type='ob', text='(')
Token(type='at', text='*')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='ptr-bytes')
Token(type='cb', text=')')
Token(type='at', text='16')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; check assumptions')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='fxsrl')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-char')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='char-data-offset')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='fixnum-offset')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='ob', text='(')
Token(type='at', text='fxlogand')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='mask-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='constant')
Token(type='at', text='type-fixnum')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'cmacros.ss")
Token(type='st', text='"expected type-char/fixnum relationship does not hold"')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='with-tc-mutex')
Token(type='ob', text='(')
Token(type='at', text='if-feature')
Token(type='at', text='pthreads')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dynamic-wind')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='disable-interrupts')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='mutex-acquire')
Token(type='at', text='$tc-mutex')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='mutex-release')
Token(type='at', text='$tc-mutex')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='enable-interrupts')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier-syntax')
Token(type='at', text='critical-section')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='hashtable-default-size')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='eq-hashtable-subtype-normal')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='eq-hashtable-subtype-weak')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='eq-hashtable-subtype-ephemeron')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; keep in sync with make-date')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-nsec')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-sec')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-min')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-hour')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-mday')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-mon')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-year')
Token(type='at', text='6')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-wday')
Token(type='at', text='7')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-yday')
Token(type='at', text='8')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-isdst')
Token(type='at', text='9')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-tzoff')
Token(type='at', text='10')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-tzname')
Token(type='at', text='11')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='dtvec-size')
Token(type='at', text='12')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='time-process')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='time-thread')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='time-duration')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='time-monotonic')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='time-utc')
Token(type='at', text='4')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='time-collector-cpu')
Token(type='at', text='5')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='time-collector-real')
Token(type='at', text='6')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='make-winder')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='critical?')
Token(type='at', text='in')
Token(type='at', text='out')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector')
Token(type='at', text='critical?')
Token(type='at', text='in')
Token(type='at', text='out')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='winder-critical?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='w')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-ref')
Token(type='at', text='w')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='winder-in')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='w')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-ref')
Token(type='at', text='w')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='winder-out')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='w')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-ref')
Token(type='at', text='w')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='winder?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?w')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='w')
Token(type='at', text='?w')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='vector?')
Token(type='at', text='w')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='ob', text='(')
Token(type='at', text='vector-length')
Token(type='at', text='w')
Token(type='cb', text=')')
Token(type='at', text='3')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='boolean?')
Token(type='ob', text='(')
Token(type='at', text='winder-critical?')
Token(type='at', text='w')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='procedure?')
Token(type='ob', text='(')
Token(type='at', text='winder-in')
Token(type='at', text='w')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='procedure?')
Token(type='ob', text='(')
Token(type='at', text='winder-out')
Token(type='at', text='w')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='default-run-cp0')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'k")
Token(type='ob', text="'(")
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='cp0')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cp0')
Token(type='ob', text='(')
Token(type='at', text='cp0')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; A state-case expression must take the following form:')
Token(type='lc', text=';;;   (state-case var eof-clause clause ... else-clause)')
Token(type='lc', text=';;; eof-clause and else-clause must take the form')
Token(type='lc', text=';;;   (eof exp1 exp2 ...)')
Token(type='lc', text=';;;   (else exp1 exp2 ...)')
Token(type='lc', text=';;; and the remaining clauses must take the form')
Token(type='lc', text=';;;   (char-set exp1 exp2 ...)')
Token(type='lc', text=';;; The value of var must be an eof object or a character.')
Token(type='lc', text=';;; state-case selects the first clause matching the value of var and')
Token(type='lc', text=';;; evaluates the expressions exp1 exp2 ... of that clause.  If the')
Token(type='lc', text=';;; value of var is an eof-object, eof-clause is selected.  Otherwise,')
Token(type='lc', text=';;; the clauses clause ... are considered from left to right.  If the')
Token(type='lc', text=';;; value of var is in the set of characters defined by the char-set of')
Token(type='lc', text=';;; a given clause, the clause is selected.  If no other clause is')
Token(type='lc', text=';;; selected, else-clause is selected.')
Token(type='nl', text='\n')
Token(type='lc', text=';;; char-set may be')
Token(type='lc', text=';;;   * a single character, e.g., #\\a, or')
Token(type='lc', text=';;;   * a list of subkeys, each of which is')
Token(type='lc', text=';;;     - a single character, or')
Token(type='lc', text=';;;     - a character range, e.g., (#\\a - #\\z)')
Token(type='lc', text=';;; For example, (#\\$ (#\\a - #\\z) (#\\A - #\\Z)) specifies the set')
Token(type='lc', text=';;; containing $ and the uppercase and lowercase letters.')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='state-case')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='state-case-test')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='cvar')
Token(type='at', text='k')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='cvar')
Token(type='at', text='cvar')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='k')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char')
Token(type='ob', text='(')
Token(type='at', text='char?')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='char')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='char=?')
Token(type='at', text='cvar')
Token(type='at', text='char')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='char1')
Token(type='at', text='-')
Token(type='at', text='char2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='char?')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='char1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char?')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='char2')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='char<=?')
Token(type='at', text='char1')
Token(type='at', text='cvar')
Token(type='at', text='char2')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='predicate')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'predicate")
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='predicate')
Token(type='at', text='cvar')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='state-case-help')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='cvar')
Token(type='at', text='clauses')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='clauses')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='at', text='exp1')
Token(type='at', text='exp2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='at', text='exp1')
Token(type='at', text='exp2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='exp1')
Token(type='at', text='exp2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='.')
Token(type='at', text='more')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='test')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='state-case-test')
Token(type='at', text='cvar')
Token(type='at', text='k')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='k')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='rest')
Token(type='ob', text='(')
Token(type='at', text='state-case-help')
Token(type='at', text='cvar')
Token(type='at', text="#'more")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='at', text='test')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='begin')
Token(type='at', text='exp1')
Token(type='at', text='exp2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='rest')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='exp1')
Token(type='at', text='exp2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='.')
Token(type='at', text='more')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='test')
Token(type='ob', text='(')
Token(type='at', text='state-case-test')
Token(type='at', text='cvar')
Token(type='at', text="#'k")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='rest')
Token(type='ob', text='(')
Token(type='at', text='state-case-help')
Token(type='at', text='cvar')
Token(type='at', text="#'more")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='if')
Token(type='at', text='test')
Token(type='ob', text='(')
Token(type='at', text='begin')
Token(type='at', text='exp1')
Token(type='at', text='exp2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='rest')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='eof')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='cvar')
Token(type='ob', text='(')
Token(type='at', text='eof')
Token(type='at', text='exp1')
Token(type='at', text='exp2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='more')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'cvar")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='rest')
Token(type='ob', text='(')
Token(type='at', text='state-case-help')
Token(type='at', text="#'cvar")
Token(type='ob', text="#'(")
Token(type='at', text='more')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='eof-object?')
Token(type='at', text='cvar')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='begin')
Token(type='at', text='exp1')
Token(type='at', text='exp2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='rest')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';; the following (old) version of state-case creates a set of vectors sc1, ...')
Token(type='lc', text=';; corresponding to each state-case in the file and records the frequency')
Token(type='lc', text=';; with which each clause (numbered from 0) matches.  this is how the reader')
Token(type='lc', text=';; is "tuned".')
Token(type='lc', text=';   (let ([n 0])')
Token(type='lc', text=';      (extend-syntax (state-case)')
Token(type='lc', text=';         [(state-case exp more ...)')
Token(type='lc', text=';          (with ([cvar (gensym)]')
Token(type='lc', text=';                 [statvar (string->symbol (format "sc~a" (set! n (1+ n))))]')
Token(type='lc', text=";                 [size (length '(more ...))])")
Token(type='lc', text=';             (let ([cvar exp])')
Token(type='lc', text=";                (unless (top-level-bound? 'statvar)")
Token(type='lc', text=';                   (printf "creating ~s~%" \'statvar)')
Token(type='lc', text=';                   (set! statvar (make-vector size 0)))')
Token(type='lc', text=';                (state-case-help statvar 0 cvar more ...)))]))')
Token(type='lc', text=';')
Token(type='lc', text=';   (extend-syntax (state-case-help else)')
Token(type='lc', text=';      [(state-case-help svar i cvar) (rd-character-error cvar)]')
Token(type='lc', text=';      [(state-case-help svar i cvar [else exp1 exp2 ...])')
Token(type='lc', text=';       (if (char<=? #\\nul cvar #\\rubout)')
Token(type='lc', text=';           (begin (vector-set! svar i (1+ (vector-ref svar i))) exp1 exp2 ...)')
Token(type='lc', text=';           (rd-character-error cvar))]')
Token(type='lc', text=';      [(state-case-help svar i cvar [(k1 ...) exp1 exp2 ...] more ...)')
Token(type='lc', text=';       (if (or (state-case-test cvar k1) ...)')
Token(type='lc', text=';           (begin (vector-set! svar i (1+ (vector-ref svar i))) exp1 exp2 ...)')
Token(type='lc', text=";           (with ([i (1+ 'i)])")
Token(type='lc', text=';              (state-case-help svar i cvar more ...)))]')
Token(type='lc', text=';      [(state-case-help svar i cvar [k1 exp1 exp2 ...] more ...)')
Token(type='lc', text=';       (if (state-case-test cvar k1)')
Token(type='lc', text=';           (begin (vector-set! svar i (1+ (vector-ref svar i))) exp1 exp2 ...)')
Token(type='lc', text=";           (with ([i (1+ 'i)])")
Token(type='lc', text=';              (state-case-help svar i cvar more ...)))])')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='message-lambda')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='ob', text='(')
Token(type='at', text='group')
Token(type='at', text='i*')
Token(type='at', text='clause*')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let*')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='n')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='ob', text='(')
Token(type='at', text='apply')
Token(type='at', text='fxmax')
Token(type='at', text='-1')
Token(type='at', text='i*')
Token(type='cb', text=')')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='v')
Token(type='ob', text='(')
Token(type='at', text='make-vector')
Token(type='at', text='n')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='for-each')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='i')
Token(type='at', text='clause')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-set!')
Token(type='at', text='v')
Token(type='at', text='i')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='at', text='clause')
Token(type='ob', text='(')
Token(type='at', text='vector-ref')
Token(type='at', text='v')
Token(type='at', text='i')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='i*')
Token(type='at', text='clause*')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='i')
Token(type='at', text='0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='at', text='i')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ls')
Token(type='ob', text='(')
Token(type='at', text='vector-ref')
Token(type='at', text='v')
Token(type='at', text='i')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='at', text='i')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='ob', text='(')
Token(type='at', text='reverse')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='at', text='i')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?err')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='arg')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='b1')
Token(type='at', text='b2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='clause**')
Token(type='ob', text='(')
Token(type='at', text='group')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='length')
Token(type='ob', text="#'(")
Token(type='ob', text='(')
Token(type='at', text='arg')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='arg')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='b1')
Token(type='at', text='b2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='#`(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='err')
Token(type='at', text='?err')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='case-lambda')
Token(type='ob', text='#,@(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='clause*')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='arg')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='b1')
Token(type='at', text='b2')
Token(type='at', text='...')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='clause*')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='t0')
Token(type='at', text='t1')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='arg')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='.')
Token(type='at', text='body')
Token(type='cb', text=']')
Token(type='at', text='.')
Token(type='at', text='rest')
Token(type='cb', text=')')
Token(type='at', text='clause*')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='generate-temporaries')
Token(type='ob', text="#'(")
Token(type='at', text='k')
Token(type='at', text='arg')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'[")
Token(type='ob', text='(')
Token(type='at', text='t0')
Token(type='at', text='t1')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='case')
Token(type='at', text='t0')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='arg')
Token(type='at', text='t1')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='b1')
Token(type='at', text='b2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='ob', text='[')
Token(type='at', text='else')
Token(type='ob', text='(')
Token(type='at', text='err')
Token(type='at', text='t0')
Token(type='at', text='t1')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='clause**')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='msg')
Token(type='at', text='.')
Token(type='at', text='args')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='apply')
Token(type='at', text='err')
Token(type='at', text='msg')
Token(type='at', text='args')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='set-who!')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='ob', text='#(')
Token(type='at', text='prefix')
Token(type='at', text='id')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'prefix")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'id")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='who')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ext-id')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'id")
Token(type='at', text="#'prefix")
Token(type='at', text="#'id")
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='set!')
Token(type='at', text='ext-id')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='who')
Token(type='at', text="'id")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='rec')
Token(type='at', text='id')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='id')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'id")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='who')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='set!')
Token(type='at', text='id')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='who')
Token(type='at', text="'id")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-who')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='ob', text='(')
Token(type='at', text='id')
Token(type='at', text='.')
Token(type='at', text='args')
Token(type='cb', text=')')
Token(type='at', text='b1')
Token(type='at', text='b2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='k')
Token(type='at', text='id')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='at', text='args')
Token(type='at', text='b1')
Token(type='at', text='b2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='ob', text='#(')
Token(type='at', text='prefix')
Token(type='at', text='id')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'prefix")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'id")
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='who')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ext-id')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'id")
Token(type='at', text="#'prefix")
Token(type='at', text="#'id")
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='define')
Token(type='at', text='ext-id')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='who')
Token(type='at', text="'id")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='rec')
Token(type='at', text='id')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='id')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'id")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='who')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='define')
Token(type='at', text='id')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='who')
Token(type='at', text="'id")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='trace-define-who')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='ob', text='(')
Token(type='at', text='id')
Token(type='at', text='.')
Token(type='at', text='args')
Token(type='cb', text=')')
Token(type='at', text='b1')
Token(type='at', text='b2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='k')
Token(type='at', text='id')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='at', text='args')
Token(type='at', text='b1')
Token(type='at', text='b2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='id')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'id")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-implicit')
Token(type='ob', text='(')
Token(type='at', text='k')
Token(type='at', text='who')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='trace-define')
Token(type='at', text='id')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='who')
Token(type='at', text="'id")
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='at', text='e')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='safe-assert')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='ob', text='(')
Token(type='at', text='debug-level')
Token(type='cb', text=')')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='void')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='assert')
Token(type='at', text='e1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='assert')
Token(type='at', text='e2')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='self-evaluating?')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='?x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='x')
Token(type='at', text='?x')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='number?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='boolean?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bytevector?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxvector?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='memq')
Token(type='at', text='x')
Token(type='ob', text="'(")
Token(type='at', text='#!eof')
Token(type='at', text='#!bwp')
Token(type='at', text='#!base-rtd')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text=';;; datatype support')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='define-datatype')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='iota')
Token(type='ob', text='(')
Token(type='at', text='case-lambda')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='iota')
Token(type='at', text='0')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='i')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='=')
Token(type='at', text='n')
Token(type='at', text='0')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='at', text='i')
Token(type='ob', text='(')
Token(type='at', text='iota')
Token(type='ob', text='(')
Token(type='at', text='+')
Token(type='at', text='i')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='at', text='n')
Token(type='at', text='1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='construct-name')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='template-identifier')
Token(type='at', text='.')
Token(type='at', text='args')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text='template-identifier')
Token(type='ob', text='(')
Token(type='at', text='string->symbol')
Token(type='ob', text='(')
Token(type='at', text='apply')
Token(type='at', text='string-append')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='string?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='symbol->string')
Token(type='ob', text='(')
Token(type='at', text='syntax->datum')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='args')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='dtname')
Token(type='ob', text='(')
Token(type='at', text='vname')
Token(type='at', text='field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'dtname")
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='define-datatype')
Token(type='ob', text='(')
Token(type='at', text='dtname')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vname')
Token(type='at', text='field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='dtname')
Token(type='at', text='dtfield-spec')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vname')
Token(type='at', text='field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='identifier?')
Token(type='ob', text="#'(")
Token(type='at', text='vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='identifier?')
Token(type='ob', text="#'(")
Token(type='at', text='field')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='split-name')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='sym')
Token(type='ob', text='(')
Token(type='at', text='syntax->datum')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='gensym?')
Token(type='at', text='sym')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='string->symbol')
Token(type='ob', text='(')
Token(type='at', text='symbol->string')
Token(type='at', text='sym')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='gensym')
Token(type='ob', text='(')
Token(type='at', text='symbol->string')
Token(type='at', text='sym')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='dtname')
Token(type='at', text='.')
Token(type='at', text='dtuid')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='split-name')
Token(type='at', text="#'dtname")
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='vname')
Token(type='at', text='.')
Token(type='at', text='vuid')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='split-name')
Token(type='ob', text="#'(")
Token(type='at', text='vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='dtfield')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='spec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='spec')
Token(type='ob', text='(')
Token(type='at', text='immutable')
Token(type='at', text='mutable')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='immutable')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'name")
Token(type='cb', text=')')
Token(type='at', text="#'name")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='mutable')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'name")
Token(type='cb', text=')')
Token(type='at', text="#'name")
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='syntax-error')
Token(type='at', text='spec')
Token(type='st', text='"invalid datatype field specifier"')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='dtfield-spec')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='dtname?')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'dtname")
Token(type='at', text="#'dtname")
Token(type='st', text='"?"')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='dtname-case')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'dtname")
Token(type='at', text="#'dtname")
Token(type='st', text='"-case"')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='at', text='dtname-variant')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'dtname")
Token(type='at', text="#'dtname")
Token(type='st', text='"-variant"')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='dtname-dtfield')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='field')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'dtname")
Token(type='at', text="#'dtname")
Token(type='st', text='"-"')
Token(type='at', text='field')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='dtfield')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='dtname-dtfield-set!')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fold-right')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='dtf')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='dtf')
Token(type='ob', text='(')
Token(type='at', text='mutable')
Token(type='at', text='immutable')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='immutable')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='at', text='ls')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='mutable')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cons')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'dtname")
Token(type='at', text="#'dtname")
Token(type='st', text='"-"')
Token(type='at', text="#'name")
Token(type='st', text='"-set!"')
Token(type='cb', text=')')
Token(type='at', text='ls')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='dtfield-spec')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='vname-field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='vname')
Token(type='at', text='fields')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='field')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'dtname")
Token(type='at', text='vname')
Token(type='st', text='"-"')
Token(type='at', text='field')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='fields')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='ob', text='(')
Token(type='at', text='field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='raw-make-vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'dtname")
Token(type='st', text='"make-"')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='make-vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text="#'dtname")
Token(type='at', text="#'dtname")
Token(type='st', text='"-"')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='lc', text='; wash away gensyms for dtname-case')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='pretty-vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='vname')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='construct-name')
Token(type='at', text='vname')
Token(type='at', text='vname')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='i')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='iota')
Token(type='ob', text='(')
Token(type='at', text='length')
Token(type='ob', text="#'(")
Token(type='at', text='vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='fvar')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='generate-temporaries')
Token(type='ob', text="#'(")
Token(type='ob', text='(')
Token(type='at', text='field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='module')
Token(type='ob', text='(')
Token(type='at', text='dtname?')
Token(type='ob', text='(')
Token(type='at', text='dtname-case')
Token(type='at', text='dtname-variant')
Token(type='at', text='vname-field')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='dtname-dtfield')
Token(type='at', text='...')
Token(type='at', text='dtname-dtfield-set!')
Token(type='at', text='...')
Token(type='at', text='make-vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-record-type')
Token(type='at', text='dtname')
Token(type='ob', text='(')
Token(type='at', text='nongenerative')
Token(type='at', text='dtuid')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fields')
Token(type='ob', text='(')
Token(type='at', text='immutable')
Token(type='at', text='variant')
Token(type='cb', text=')')
Token(type='at', text='dtfield-spec')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='module')
Token(type='ob', text='(')
Token(type='at', text='make-vname')
Token(type='at', text='vname-field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-record-type')
Token(type='ob', text='(')
Token(type='at', text='vname')
Token(type='at', text='make-vname')
Token(type='at', text='vname?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='nongenerative')
Token(type='at', text='vuid')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='parent')
Token(type='at', text='dtname')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fields')
Token(type='ob', text='(')
Token(type='at', text='immutable')
Token(type='at', text='field')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='protocol')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='make-new')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='dtfield')
Token(type='at', text='...')
Token(type='at', text='field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='make-new')
Token(type='at', text='i')
Token(type='at', text='dtfield')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='field')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='dtname-case')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='make-clause')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='pretty-vname')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='pretty-vname')
Token(type='ob', text='(')
Token(type='at', text='fvar')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='ob', text='(')
Token(type='at', text='i')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='fvar')
Token(type='ob', text='(')
Token(type='at', text='vname-field')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='__')
Token(type='at', text='e0')
Token(type='ob', text='(')
Token(type='at', text='v')
Token(type='ob', text='(')
Token(type='at', text='fld')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='at', text='e3')
Token(type='at', text='e4')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='lc', text='; could discard else clause if all variants are mentioned')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='clause')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='make-clause')
Token(type='ob', text="#'(")
Token(type='ob', text='(')
Token(type='at', text='v')
Token(type='ob', text='(')
Token(type='at', text='fld')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='t')
Token(type='at', text='e0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='case')
Token(type='ob', text='(')
Token(type='at', text='dtname-variant')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='at', text='clause')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='else')
Token(type='at', text='e3')
Token(type='at', text='e4')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='__')
Token(type='at', text='e0')
Token(type='ob', text='(')
Token(type='at', text='v')
Token(type='ob', text='(')
Token(type='at', text='fld')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ls1')
Token(type='ob', text='(')
Token(type='at', text='list')
Token(type='at', text="#'pretty-vname")
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='ls1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='at', text='g')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='ls2')
Token(type='ob', text="#'(")
Token(type='at', text='v')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='at', text='null?')
Token(type='at', text='ls2')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-error')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='format')
Token(type='st', text='"unhandled `~s\' variant in"')
Token(type='ob', text='(')
Token(type='at', text='syntax->datum')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='ls1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='literal-identifier=?')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='ls1')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='ls2')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='g')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='ls2')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='f')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='ls1')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='clause')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map')
Token(type='at', text='make-clause')
Token(type='ob', text="#'(")
Token(type='ob', text='(')
Token(type='at', text='v')
Token(type='ob', text='(')
Token(type='at', text='fld')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='e1')
Token(type='at', text='e2')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='t')
Token(type='at', text='e0')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='case')
Token(type='ob', text='(')
Token(type='at', text='dtname-variant')
Token(type='at', text='t')
Token(type='cb', text=')')
Token(type='at', text='clause')
Token(type='ob', text='(')
Token(type='at', text='...')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='lc', text='; support for changing from old to new nongenerative record types')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='update-record-type')
Token(type='ob', text='(')
Token(type='at', text='syntax-rules')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='make-name')
Token(type='at', text='pred?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='accessor')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='mutator')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='old-defn')
Token(type='at', text='new-defn')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='module')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='make-name')
Token(type='at', text='pred?')
Token(type='at', text='accessor')
Token(type='at', text='...')
Token(type='at', text='mutator')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='module')
Token(type='at', text='old')
Token(type='ob', text='(')
Token(type='at', text='pred?')
Token(type='at', text='accessor')
Token(type='at', text='...')
Token(type='at', text='mutator')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='old-defn')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='module')
Token(type='at', text='new')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='make-name')
Token(type='at', text='pred?')
Token(type='at', text='accessor')
Token(type='at', text='...')
Token(type='at', text='mutator')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='at', text='new-defn')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='ob', text='(')
Token(type='at', text='only')
Token(type='at', text='new')
Token(type='at', text='name')
Token(type='at', text='make-name')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='pred?')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='at', text='old')
Token(type='cb', text=')')
Token(type='at', text='pred?')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='at', text='new')
Token(type='cb', text=')')
Token(type='at', text='pred?')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='accessor')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='at', text='old')
Token(type='cb', text=')')
Token(type='at', text='pred?')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='at', text='old')
Token(type='cb', text=')')
Token(type='at', text='accessor')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='at', text='new')
Token(type='cb', text=')')
Token(type='at', text='accessor')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='at', text='mutator')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='at', text='v')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='if')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='at', text='old')
Token(type='cb', text=')')
Token(type='at', text='pred?')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='at', text='old')
Token(type='cb', text=')')
Token(type='at', text='mutator')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='import')
Token(type='at', text='new')
Token(type='cb', text=')')
Token(type='at', text='mutator')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='at', text='v')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='type-check')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='who')
Token(type='at', text='type')
Token(type='at', text='arg')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'type")
Token(type='cb', text=')')
Token(type='ob', text='#`(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='x')
Token(type='at', text='arg')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='ob', text='#,(')
Token(type='at', text='construct-name')
Token(type='at', text="#'type")
Token(type='at', text="#'type")
Token(type='st', text='"?"')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text='who')
Token(type='ob', text='#,(')
Token(type='at', text='format')
Token(type='st', text='"~~s is not a ~a"')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='type')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='who')
Token(type='at', text='type')
Token(type='at', text='pred')
Token(type='at', text='arg')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string?')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='type')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='#`(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='x')
Token(type='at', text='arg')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='pred')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text='who')
Token(type='ob', text='#,(')
Token(type='at', text='format')
Token(type='st', text='"~~s is not a ~a"')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='type')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eval-when')
Token(type='ob', text='(')
Token(type='at', text='load')
Token(type='at', text='eval')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='lookup-libspec')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'x")
Token(type='cb', text=')')
Token(type='ob', text='#`(')
Token(type='at', text='quote')
Token(type='ob', text='#,(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'x")
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='$sgetprop')
Token(type='at', text='x')
Token(type='at', text="'*libspec*")
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'lookup-libspec")
Token(type='st', text='"~s is undefined"')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='lookup-does-not-expect-headroom-libspec')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'x")
Token(type='cb', text=')')
Token(type='ob', text='#`(')
Token(type='at', text='quote')
Token(type='ob', text='#,(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'x")
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='$sgetprop')
Token(type='at', text='x')
Token(type='at', text="'*does-not-expect-headroom-libspec*")
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'lookup-does-not-expect-headroom-libspec")
Token(type='st', text='"~s is undefined"')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='lookup-c-entry')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='identifier?')
Token(type='at', text="#'x")
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='sym')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum->syntax')
Token(type='at', text="#'x")
Token(type='ob', text='(')
Token(type='at', text='or')
Token(type='ob', text='(')
Token(type='at', text='$sgetprop')
Token(type='at', text='sym')
Token(type='at', text="'*c-entry*")
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'lookup-c-entry")
Token(type='st', text='"~s is undefined"')
Token(type='at', text='sym')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='declare-library-entries')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='closure?')
Token(type='at', text='interface')
Token(type='at', text='error?')
Token(type='at', text='has-does-not-expect-headroom-version?')
Token(type='cb', text=')')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='ob', text='(')
Token(type='at', text='index-base')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='enumerate')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='for-each')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='closure?')
Token(type='at', text='interface')
Token(type='at', text='error?')
Token(type='at', text='has-does-not-expect-headroom-version?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define')
Token(type='ob', text='(')
Token(type='at', text='nnfixnum?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='fixnum?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxnonnegative?')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unless')
Token(type='ob', text='(')
Token(type='at', text='and')
Token(type='ob', text='(')
Token(type='at', text='symbol?')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='boolean?')
Token(type='at', text='closure?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='nnfixnum?')
Token(type='at', text='interface')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='boolean?')
Token(type='at', text='error?')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$oops')
Token(type='at', text="'declare-library-entries")
Token(type='st', text='"invalid entry for ~s"')
Token(type='at', text='name')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='closure?')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='interface')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='error?')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='has-does-not-expect-headroom-version?')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='#`(')
Token(type='at', text='begin')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='library-entry-vector-size')
Token(type='ob', text='#,(')
Token(type='at', text='*')
Token(type='ob', text='(')
Token(type='at', text='length')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='index-base')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='at', text='2')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='for-each')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='xname')
Token(type='at', text='xindex-base')
Token(type='at', text='xclosure?')
Token(type='at', text='xinterface')
Token(type='at', text='xerror?')
Token(type='at', text='xhas-does-not-expect-headroom-version?')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$sputprop')
Token(type='at', text='xname')
Token(type='at', text="'*libspec*")
Token(type='ob', text='(')
Token(type='at', text='make-libspec')
Token(type='at', text='xname')
Token(type='ob', text='(')
Token(type='at', text='make-libspec-flags')
Token(type='at', text='xindex-base')
Token(type='at', text='#f')
Token(type='at', text='xclosure?')
Token(type='at', text='xinterface')
Token(type='at', text='xerror?')
Token(type='at', text='xhas-does-not-expect-headroom-version?')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='when')
Token(type='at', text='xhas-does-not-expect-headroom-version?')
Token(type='ob', text='(')
Token(type='at', text='$sputprop')
Token(type='at', text='xname')
Token(type='at', text="'*does-not-expect-headroom-libspec*")
Token(type='ob', text='(')
Token(type='at', text='make-libspec')
Token(type='at', text='xname')
Token(type='ob', text='(')
Token(type='at', text='make-libspec-flags')
Token(type='at', text='xindex-base')
Token(type='at', text='#t')
Token(type='at', text='xclosure?')
Token(type='at', text='xinterface')
Token(type='at', text='xerror?')
Token(type='at', text='xhas-does-not-expect-headroom-version?')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='name')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='index-base')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='closure?')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='interface')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='error?')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='has-does-not-expect-headroom-version?')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='declare-library-entries')
Token(type='ob', text='(')
Token(type='at', text='main')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='lc', text=';; fake entry for main, never called directly (part of fasl load)')
Token(type='ob', text='(')
Token(type='at', text='car')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unbox')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='set-box!')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='box-cas!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='<')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='>')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='<=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='>=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='+')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='-')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='*')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='/')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-read-char')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-read-char')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-peek-char')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-peek-char')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-write-char')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-write-char')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-newline')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-newline')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$top-level-value')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='event')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='zero?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='1+')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='1-')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx+')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx-')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx<')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx>')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx<=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx>=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl+')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl-')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl*')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl/')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl<')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl>')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl<=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl>=')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='callcc')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='display-string')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cfl*')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cfl+')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cfl-')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cfl/')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='negate')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='flnegate')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='call-error')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-unread-char')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map-car')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map-cons')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx1+')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx1-')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxzero?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxpositive?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxnegative?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxnonpositive?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxnonnegative?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxeven?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxodd?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogor')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogxor')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogand')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlognot')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsll')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsrl')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxsra')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='append')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='values-error')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dooverflow')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dooverflood')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='nonprocedure-code')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dounderflow')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofargint32')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map-cdr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofretint32')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofretuns32')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='domvleterr')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='doargerr')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='get-room')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='map2')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='for-each1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-ref')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-cas!')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-set!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-length')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string-ref')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string-set!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string-length')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char<?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char>?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char<=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char>=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='char->integer')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='memv')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eqv?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='set-car!')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='set-cdr!')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cadr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cddr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caaar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caadr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cadar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caddr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdaar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdadr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cddar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdddr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caaaar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caaadr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caadar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caaddr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cadaar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cadadr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='caddar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cadddr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdaaar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdaadr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdadar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdaddr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cddaar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cddadr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cdddar')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='cddddr')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dounderflow*')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='call1cc')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest0')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest1')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest2')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest3')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest4')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest5')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='add1')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='sub1')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='-1+')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx*')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofargint64')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofretint64')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofretuns64')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='apply0')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='apply1')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='apply2')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='apply3')
Token(type='at', text='#f')
Token(type='at', text='5')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='logand')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='logor')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='logxor')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='lognot')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='flround')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogtest')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogbit?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='logtest')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='logbit?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogior')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='logior')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogbit0')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxlogbit1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='logbit0')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='logbit1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-set-fixnum!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxvector-ref')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxvector-set!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxvector-length')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='scan-remembered-set')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fold-left1')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fold-left2')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fold-right1')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fold-right2')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='for-each2')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-map1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-map2')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-for-each1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-for-each2')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bytevector-length')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bytevector-s8-ref')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bytevector-u8-ref')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bytevector-s8-set!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bytevector-u8-set!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bytevector=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='real->flonum')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-port-eof?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-lookahead-u8')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-unget-u8')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-get-u8')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-lookahead-char')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-unget-char')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-get-char')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-put-u8')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='put-bytevector')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='unsafe-put-char')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='put-string')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string-for-each1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='string-for-each2')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx<?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx>?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx<=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fx>=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl<?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl>?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl<=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fl>=?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bitwise-and')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bitwise-ior')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bitwise-xor')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bitwise-not')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxior')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxxor')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxand')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxnot')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxarithmetic-shift-left')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxarithmetic-shift-right')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxarithmetic-shift')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='bitwise-bit-set?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxbit-set?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='fxcopy-bit')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='reverse')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='andmap1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='ormap1')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='put-bytevector-some')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='put-string-some')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofretu8*')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofretu16*')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dofretu32*')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#f')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eq-hashtable-ref')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eq-hashtable-contains?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eq-hashtable-cell')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eq-hashtable-set!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eq-hashtable-update!')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='eq-hashtable-delete!')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='symbol-hashtable-ref')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='symbol-hashtable-contains?')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='symbol-hashtable-cell')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='symbol-hashtable-set!')
Token(type='at', text='#f')
Token(type='at', text='3')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='symbol-hashtable-update!')
Token(type='at', text='#f')
Token(type='at', text='4')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='symbol-hashtable-delete!')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-port-eof?')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-lookahead-u8')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-unget-u8')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-get-u8')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-lookahead-char')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-unget-char')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-get-char')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-put-u8')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-put-char')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='safe-unread-char')
Token(type='at', text='#f')
Token(type='at', text='2')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest0')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest1')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest2')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest3')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest4')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='dorest5')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='nuate')
Token(type='at', text='#f')
Token(type='at', text='0')
Token(type='at', text='#f')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='virtual-register')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='set-virtual-register!')
Token(type='at', text='#f')
Token(type='at', text='1')
Token(type='at', text='#t')
Token(type='at', text='#t')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-syntax')
Token(type='at', text='declare-c-entries')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='syntax-case')
Token(type='at', text='x')
Token(type='ob', text='(')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='_')
Token(type='at', text='x')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='andmap')
Token(type='at', text='identifier?')
Token(type='ob', text="#'(")
Token(type='at', text='x')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='with-syntax')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='size')
Token(type='ob', text='(')
Token(type='at', text='length')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='ob', text='(')
Token(type='at', text='i')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='enumerate')
Token(type='ob', text='(')
Token(type='at', text='datum')
Token(type='ob', text='(')
Token(type='at', text='x')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="#'(")
Token(type='at', text='let')
Token(type='ob', text='(')
Token(type='ob', text='[')
Token(type='at', text='name-vec')
Token(type='ob', text='(')
Token(type='at', text='make-vector')
Token(type='at', text='size')
Token(type='cb', text=')')
Token(type='cb', text=']')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='c-entry-vector-size')
Token(type='at', text='size')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='define-constant')
Token(type='at', text='c-entry-name-vector')
Token(type='at', text='name-vec')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='for-each')
Token(type='ob', text='(')
Token(type='at', text='lambda')
Token(type='ob', text='(')
Token(type='at', text='s')
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='vector-set!')
Token(type='at', text='name-vec')
Token(type='at', text='n')
Token(type='at', text='s')
Token(type='cb', text=')')
Token(type='ob', text='(')
Token(type='at', text='$sputprop')
Token(type='at', text='s')
Token(type='at', text="'*c-entry*")
Token(type='at', text='n')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='x')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='ob', text="'(")
Token(type='at', text='i')
Token(type='at', text='...')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='nl', text='\n')
Token(type='ob', text='(')
Token(type='at', text='declare-c-entries')
Token(type='at', text='thread-context')
Token(type='at', text='get-thread-context')
Token(type='at', text='handle-apply-overflood')
Token(type='at', text='handle-docall-error')
Token(type='at', text='handle-overflow')
Token(type='at', text='handle-overflood')
Token(type='at', text='handle-nonprocedure-symbol')
Token(type='at', text='thread-list')
Token(type='at', text='split-and-resize')
Token(type='at', text='raw-collect-cond')
Token(type='at', text='raw-tc-mutex')
Token(type='at', text='activate-thread')
Token(type='at', text='deactivate-thread')
Token(type='at', text='unactivate-thread')
Token(type='at', text='handle-values-error')
Token(type='at', text='handle-mvlet-error')
Token(type='at', text='handle-arg-error')
Token(type='at', text='foreign-entry')
Token(type='at', text='install-library-entry')
Token(type='at', text='get-more-room')
Token(type='at', text='scan-remembered-set')
Token(type='at', text='instantiate-code-object')
Token(type='at', text='Sreturn')
Token(type='at', text='Scall-one-result')
Token(type='at', text='Scall-any-results')
Token(type='cb', text=')')
Token(type='cb', text=')')
Token(type='cb', text=')')
